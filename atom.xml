<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>看见LEON</title>
  <subtitle>待我代码编成，娶你可好！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://leoncommons.cn/"/>
  <updated>2018-05-18T08:29:57.986Z</updated>
  <id>http://leoncommons.cn/</id>
  
  <author>
    <name>Leon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Jetpack 之Navigation Architecture Component使用</title>
    <link href="http://leoncommons.cn/2018/05/18/Android%20Jetpack%20%E4%B9%8BNavigation%20Architecture%20Component%E4%BD%BF%E7%94%A8/"/>
    <id>http://leoncommons.cn/2018/05/18/Android Jetpack 之Navigation Architecture Component使用/</id>
    <published>2018-05-18T08:00:09.000Z</published>
    <updated>2018-05-18T08:29:57.986Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在刚刚结束的谷歌IO大会上，谷歌推出了Android Jetpack架构组件；正如官网所说，Android Jetpack 是一套组件、工具和指导，可以帮助您构建出色的 Android 应用。Android Jetpack 组件将现有的支持库与架构组件联系起来，并将它们分成四个类别：Architecture、Foundation、Behavior 以及 UI。他能够让开发者创造出更加出色的高质量应用。</p>
</blockquote>
<a id="more"></a>
<p><img src="http://bp.googleblog.cn/-dwL58chu7wo/WvD1RrHln3I/AAAAAAAAFUg/cRTc0IZga_wMPTWr3CI53IZ5BwtnZMeYACLcBGAs/s1600/Screen%2BShot%2B2018-05-05%2Bat%2B11.49.30%2BAMimage1.png" alt="Android Jetpack"></p>
<h3 id="Navigation-Architecture-Component-介绍"><a href="#Navigation-Architecture-Component-介绍" class="headerlink" title="Navigation Architecture Component 介绍"></a>Navigation Architecture Component 介绍</h3><blockquote>
<p>Navigation导航编辑器作为Android Jetpack和 AndroidX 依赖库的一部分其目标旨在简化Android开发中导航的实现。Navigation可以帮助我们很好的处理Activity和fragment之间通过FragmentTransaction交互的复杂性。另外Navigation也可以很好的处理页面的转场效果。当然熟悉IOS开发的同学肯定看到这肯定会觉得这不就是StoryBoard么。关于Navigation的介绍，谷歌官方介绍的也不是很详细（英语太差!!!）, 那么我们就动手实现个吧。</p>
</blockquote>
<p><img src="http://bp.googleblog.cn/-GKJGCirclDI/WvD1qlznfAI/AAAAAAAAFUo/zaTtY_hbSegdNssiTKqt0RvmarnRgUZrQCLcBGAs/s1600/pasted%2Bimage%2B0%2B%25282%2529image2.png" alt="image"></p>
<h3 id="Navigation-使用"><a href="#Navigation-使用" class="headerlink" title="Navigation 使用"></a>Navigation 使用</h3><h5 id="创建Android-Jetpack-应用（Android-Studio-3-2-Canary-13及更高版本）"><a href="#创建Android-Jetpack-应用（Android-Studio-3-2-Canary-13及更高版本）" class="headerlink" title="创建Android Jetpack 应用（Android Studio 3.2 Canary 13及更高版本）"></a>创建Android Jetpack 应用（Android Studio 3.2 Canary 13及更高版本）</h5><p><img src="http://oxp7ffm1s.bkt.clouddn.com/2.jpg" alt="image"></p>
<h5 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h5><ol>
<li>项目的build.gradle: </li>
</ol>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">buildscript</span> &#123;</div><div class="line">	...</div><div class="line">	<span class="keyword">repositories</span> &#123;</div><div class="line">    		google()</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">dependencies</span> &#123;</div><div class="line">    		...</div><div class="line">    		<span class="keyword">classpath</span> <span class="string">'android.arch.navigation:navigation-safe-args-gradle-plugin:1.0.0-alpha01'</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>在app的build.gradle中添加如下依赖:</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply <span class="string">plugin:</span> <span class="string">'androidx.navigation.safeargs'</span></div></pre></td></tr></table></figure>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">implementation</span> <span class="string">'android.arch.navigation:navigation-fragment:1.0.0-alpha01'</span></div><div class="line"><span class="keyword">implementation</span> <span class="string">'android.arch.navigation:navigation-ui:1.0.0-alpha01'</span></div></pre></td></tr></table></figure>
<h5 id="创建导航编辑器"><a href="#创建导航编辑器" class="headerlink" title="创建导航编辑器"></a>创建导航编辑器</h5><blockquote>
<p>右键res资源文件夹 ：  New -&gt; Android resource file -&gt; 输入xml文件名称并选择Resource type为Navigation -&gt; OK</p>
</blockquote>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/3.jpg" alt="image"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">navigation</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">navigation</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="给Activity添加导航视图"><a href="#给Activity添加导航视图" class="headerlink" title="给Activity添加导航视图"></a>给Activity添加导航视图</h5><blockquote>
<p>由于Navigation 中需要将fragment视图和activity绑定，那么接下来改造吧：</p>
</blockquote>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?xml <span class="keyword">version</span>=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;android.support.<span class="keyword">constraint</span>.ConstraintLayout </div><div class="line">    xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    xmlns:<span class="keyword">app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    android:id=<span class="string">"@+id/container"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    tools:context=<span class="string">".MainActivity"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;fragment</div><div class="line">        android:id=<span class="string">"@+id/my_nav_host_fragment"</span></div><div class="line">        android:name=<span class="string">"androidx.navigation.fragment.NavHostFragment"</span></div><div class="line">        android:layout_width=<span class="string">"0dp"</span></div><div class="line">        android:layout_height=<span class="string">"0dp"</span></div><div class="line">        <span class="keyword">app</span>:defaultNavHost=<span class="string">"true"</span></div><div class="line">        <span class="keyword">app</span>:layout_constraintBottom_toBottomOf=<span class="string">"parent"</span></div><div class="line">        <span class="keyword">app</span>:layout_constraintEnd_toEndOf=<span class="string">"parent"</span></div><div class="line">        <span class="keyword">app</span>:layout_constraintHorizontal_bias=<span class="string">"1"</span></div><div class="line">        <span class="keyword">app</span>:layout_constraintStart_toStartOf=<span class="string">"parent"</span></div><div class="line">        <span class="keyword">app</span>:layout_constraintTop_toTopOf=<span class="string">"parent"</span></div><div class="line">        <span class="keyword">app</span>:layout_constraintVertical_bias=<span class="string">"1"</span></div><div class="line">        <span class="keyword">app</span>:navGraph=<span class="string">"@navigation/main_navigation"</span> /&gt;</div><div class="line"></div><div class="line">&lt;/android.support.<span class="keyword">constraint</span>.ConstraintLayout&gt;</div></pre></td></tr></table></figure>
<p>activity中fragment默认为NavHostFragment，NavHostFragment通过navGraph与navigation导航编辑器进行关联。<br>app:defaultNavHost=”true”可以让NavHostFragment处理系统的返回事件</p>
<h5 id="编辑Navigation导航视图"><a href="#编辑Navigation导航视图" class="headerlink" title="编辑Navigation导航视图"></a>编辑Navigation导航视图</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">navigation</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">app:startDestination</span>=<span class="string">"@+id/main_fragment"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"com.wangjun.app.jetpacktodolist.ui.main.MainFragment"</span></div><div class="line">        <span class="attr">android:id</span>= <span class="string">"@+id/main_fragment"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/main_fragment_title"</span></div><div class="line">        <span class="attr">tools:layout</span>=<span class="string">"@layout/main_fragment"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">fragment</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/settings_activity"</span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"com.wangjun.app.jetpacktodolist.ui.SettingActivity"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/activity_settings"</span></div><div class="line">        <span class="attr">tools:layout</span>=<span class="string">"@layout/setting_activity"</span></div><div class="line">        /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">navigation</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们看到navigation标签声明了一个  app:startDestination=”@+id/main_fragment”  属性，他是导航器默认加载的视图</p>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/4.jpg" alt="image"></p>
<h5 id="Navigation-跳转–-Action"><a href="#Navigation-跳转–-Action" class="headerlink" title="Navigation 跳转– Action"></a>Navigation 跳转– Action</h5><blockquote>
<p>现在我们看到我们的导航编辑器又两个视图，main_fragment和 settings_activity，我们现在需要从main_fragment中跳转到 settings_activity的话，可以给main_fragment添加action标签来完成跳转</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">navigation</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">app:startDestination</span>=<span class="string">"@+id/main_fragment"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"com.wangjun.app.jetpacktodolist.ui.main.MainFragment"</span></div><div class="line">        <span class="attr">android:id</span>= <span class="string">"@+id/main_fragment"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/main_fragment_title"</span></div><div class="line">        <span class="attr">tools:layout</span>=<span class="string">"@layout/main_fragment"</span>&gt;</div><div class="line"></div><div class="line">        <span class="comment">&lt;!--跳转到SettingActivity--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/action_main_fragment_to_settings_activity"</span></div><div class="line">            <span class="attr">app:destination</span>=<span class="string">"@id/settings_activity"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">fragment</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/settings_activity"</span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"com.wangjun.app.jetpacktodolist.ui.SettingActivity"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/activity_settings"</span></div><div class="line">        <span class="attr">tools:layout</span>=<span class="string">"@layout/setting_activity"</span></div><div class="line">        /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">navigation</span>&gt;</span></div></pre></td></tr></table></figure>
<p>action标签中的 app:destination  就是我们要加载导航的视图</p>
<blockquote>
<p>当然我们也可以在导航编辑器中通过拖动来完成</p>
</blockquote>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/5.gif" alt="image"></p>
<p>接下来我们在MainFragment中添加一个按钮来完成跳转SettingActivity</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml <span class="keyword">version</span>=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;android.support.<span class="keyword">constraint</span>.ConstraintLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    xmlns:<span class="keyword">app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    android:id=<span class="string">"@+id/main"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    tools:context=<span class="string">".ui.main.MainFragment"</span>&gt;</div><div class="line"></div><div class="line">    &lt;android.support.v7.widget.AppCompatButton</div><div class="line">        android:id=<span class="string">"@+id/btn_setting"</span></div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        <span class="keyword">app</span>:layout_constraintBottom_toBottomOf=<span class="string">"parent"</span></div><div class="line">        <span class="keyword">app</span>:layout_constraintEnd_toEndOf=<span class="string">"parent"</span></div><div class="line">        <span class="keyword">app</span>:layout_constraintHorizontal_bias=<span class="string">"0.5"</span></div><div class="line">        <span class="keyword">app</span>:layout_constraintStart_toStartOf=<span class="string">"parent"</span></div><div class="line">        <span class="keyword">app</span>:layout_constraintTop_toTopOf=<span class="string">"parent"</span></div><div class="line">        <span class="keyword">app</span>:layout_constraintVertical_bias=<span class="string">"0.5"</span> /&gt;</div><div class="line"></div><div class="line">&lt;/android.support.<span class="keyword">constraint</span>.ConstraintLayout&gt;</div></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainFragment</span> : <span class="type">Fragment</span></span>() &#123;</div><div class="line"></div><div class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</div><div class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">newInstance</span><span class="params">()</span></span> = MainFragment()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> viewModel: MainViewModel</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?,</span></span></div><div class="line">                              savedInstanceState: <span class="type">Bundle</span>?): View &#123;</div><div class="line">        <span class="keyword">val</span> view = inflater.inflate(R.layout.main_fragment, container, <span class="literal">false</span>)</div><div class="line"></div><div class="line">        view.findViewById&lt;AppCompatButton&gt;(R.id.btn_setting).setOnClickListener &#123;</div><div class="line">            Navigation.findNavController(view).navigate(R.id.action_main_fragment_to_settings_activity)</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">return</span> view</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们看到通过  Navigation.findNavController(view) 得到一个NavController,通过 NavController.navigate(R.id.xxxx) 会对应到当前View的某个Action，这样我们就可以跳转了。是不是很简单~~~</p>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/6.gif" alt="image"></p>
<blockquote>
<p>添加转场动画<br>添加转场动画也很简单，我们只需要在action添加如下属性</p>
</blockquote>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;fragment</div><div class="line">        android:name=<span class="string">"com.wangjun.app.jetpacktodolist.ui.main.MainFragment"</span></div><div class="line">        android:id= <span class="string">"@+id/main_fragment"</span></div><div class="line">        android:label=<span class="string">"@string/main_fragment_title"</span></div><div class="line">        tools:layout=<span class="string">"@layout/main_fragment"</span>&gt;</div><div class="line"></div><div class="line">        &lt;action</div><div class="line">            app:popEnterAnim=<span class="string">"@anim/slide_in_left"</span></div><div class="line">            app:popExitAnim=<span class="string">"@anim/slide_out_right"</span></div><div class="line">            app:enterAnim=<span class="string">"@anim/slide_in_right"</span></div><div class="line">            app:exitAnim=<span class="string">"@anim/slide_out_left"</span></div><div class="line">            android:id=<span class="string">"@+id/action_main_fragment_to_settings_activity"</span></div><div class="line">            app:destination=<span class="string">"@id/settings_activity"</span> /&gt;</div><div class="line"></div><div class="line">&lt;<span class="regexp">/fragment&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/7.gif" alt="image"></p>
<h5 id="传递数据"><a href="#传递数据" class="headerlink" title="传递数据"></a>传递数据</h5><blockquote>
<p>和以前一样我们可以通过bundle传递数据</p>
</blockquote>
<p>代码中手写</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> &lt;fragment</div><div class="line">        android:id=<span class="string">"@+id/main2_fragment"</span></div><div class="line">        android:<span class="built_in">name</span>=<span class="string">"com.wangjun.app.jetpacktodolist.ui.main.Main2Fragment"</span></div><div class="line">        android:label=<span class="string">"@string/main2_fragment_title"</span></div><div class="line">        tools:layout=<span class="string">"@layout/main2_fragment"</span>&gt;</div><div class="line"></div><div class="line">        &lt;argument android:<span class="built_in">name</span>=<span class="string">"testArg"</span></div><div class="line">            app:<span class="built_in">type</span>=<span class="string">"string"</span></div><div class="line">            android:defaultValue=<span class="string">"Hello Leon"</span></div><div class="line">            /&gt;</div><div class="line"></div><div class="line">        &lt;argument</div><div class="line">            android:<span class="built_in">name</span>=<span class="string">"testArg2"</span></div><div class="line">            android:defaultValue=<span class="string">"大王叫我来巡山"</span></div><div class="line">            app:<span class="built_in">type</span>=<span class="string">"string"</span> /&gt;</div><div class="line"></div><div class="line">&lt;/fragment&gt;</div></pre></td></tr></table></figure>
<p>导航编辑器添加</p>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/8.jpg" alt="image"></p>
<p>MainFragment传参到 Main2Fragment</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainFragment</span> : <span class="type">Fragment</span></span>() &#123;</div><div class="line"></div><div class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</div><div class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">newInstance</span><span class="params">()</span></span> = MainFragment()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> viewModel: MainViewModel</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?,</span></span></div><div class="line">                              savedInstanceState: <span class="type">Bundle</span>?): View &#123;</div><div class="line">        <span class="keyword">val</span> view = inflater.inflate(R.layout.main_fragment, container, <span class="literal">false</span>)</div><div class="line"></div><div class="line">        view.findViewById&lt;AppCompatButton&gt;(R.id.btn_setting).setOnClickListener &#123;</div><div class="line">            Navigation.findNavController(view).navigate(R.id.action_main_fragment_to_settings_activity)</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 参数跳转</div><div class="line">         */</div><div class="line">        view.findViewById&lt;AppCompatButton&gt;(R.id.btn_main2).setOnClickListener &#123;</div><div class="line"></div><div class="line">            <span class="keyword">val</span> bundle = bundleOf(<span class="string">"testArg"</span> to <span class="string">"很高兴遇见你"</span>,</div><div class="line">                    <span class="string">"testArg2"</span> to <span class="string">"你是猴子派来的逗逼吗"</span>)</div><div class="line">            Navigation.findNavController(view).navigate(</div><div class="line">                    R.id.action_main_fragment_to_main2_fragment,</div><div class="line">                    bundle)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> view</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityCreated</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState)</div><div class="line">        viewModel = ViewModelProviders.of(<span class="keyword">this</span>).<span class="keyword">get</span>(MainViewModel::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main2Fragment</span> : <span class="type">Fragment</span></span>() &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> testArg: String</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> testArg2: String</div><div class="line"></div><div class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">newInstance</span><span class="params">()</span></span> = Main2Fragment()</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressLint(<span class="meta-string">"SetTextI18n"</span>)</span></div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?,</span></span></div><div class="line"></div><div class="line">                              savedInstanceState: <span class="type">Bundle</span>?): View &#123;</div><div class="line"></div><div class="line">        <span class="keyword">val</span> view = inflater.inflate(R.layout.main2_fragment, container, <span class="literal">false</span>)</div><div class="line"></div><div class="line">        arguments?.let &#123;</div><div class="line"></div><div class="line">            testArg = it[<span class="string">"testArg"</span>] <span class="keyword">as</span> String</div><div class="line"></div><div class="line">            testArg2 = it[<span class="string">"testArg2"</span>] <span class="keyword">as</span> String</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">var</span> tvMain = view.findViewById&lt;AppCompatTextView&gt;(R.id.tv_main)</div><div class="line"></div><div class="line">        tvMain.text = <span class="string">"<span class="variable">$testArg</span>---<span class="variable">$testArg2</span>"</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> view</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们发现传参是通过NavController 来传递的，具体源码如下：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">NavController</span><span class="selector-class">.java</span></div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line">     * Navigate to a destination from the current navigation graph. This supports both navigating</div><div class="line">     * via an &#123;@link NavDestination#getAction(int) action&#125; and directly navigating to a destination.</div><div class="line">     *</div><div class="line">     * @param resId an &#123;@link NavDestination#getAction(int) action&#125; id or a destination id to</div><div class="line">     *              navigate to</div><div class="line">     * @param args arguments to pass to the destination</div><div class="line">     */</div><div class="line">    <span class="selector-tag">public</span> <span class="selector-tag">final</span> <span class="selector-tag">void</span> <span class="selector-tag">navigate</span>(<span class="variable">@IdRes</span> int resId, <span class="variable">@Nullable</span> Bundle args) &#123;</div><div class="line">        <span class="selector-tag">navigate</span>(resId, args, null);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/911.png" alt="image"></p>
<h5 id="深层链接-deep-link"><a href="#深层链接-deep-link" class="headerlink" title="深层链接 deep-link"></a>深层链接 deep-link</h5><p>其实很好理解的，也就是我们以前所说的自定义URL使用Scheme方式来跳转传参</p>
<p>navigation.xml</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">navigation</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/settings_activity"</span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"com.wangjun.app.jetpacktodolist.ui.SettingActivity"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/activity_settings"</span></div><div class="line">        <span class="attr">tools:layout</span>=<span class="string">"@layout/setting_activity"</span> &gt;</div><div class="line"></div><div class="line">        <span class="comment">&lt;!--深层链接--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">deepLink</span> <span class="attr">app:uri</span>=<span class="string">"www.leonwang.com/hello/</span></span><span class="template-variable">&#123;testArg&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">navigation</span>&gt;</span></div></pre></td></tr></table></figure>
<p>AndroidManifest.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">".ui.SettingActivity"</span></div><div class="line">            <span class="attr">android:label</span>=<span class="string">"@string/activity_settings"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"https"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"http"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:host</span>=<span class="string">"www.leonwang.com"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:pathPrefix</span>=<span class="string">"/hello/"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><blockquote>
<p>根据官方文档说明，为了保证导航的正确使用，我们需要在目标的Activity中重写onSupportNavigateUp，以确保导航器能够正确的回退栈。</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSupportNavigateUp</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</div><div class="line">	<span class="keyword">return</span> navController.navigateUp()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>好了，导航组件基本的使用就这么多，<a href="https://github.com/leon2017/JetpackNavigation" target="_blank" rel="external">DEMO</a>。关于更加详细的介绍，请参考<a href="https://developer.android.com/topic/libraries/architecture/navigation/navigation-implementing" target="_blank" rel="external">官方文档</a>说明</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在刚刚结束的谷歌IO大会上，谷歌推出了Android Jetpack架构组件；正如官网所说，Android Jetpack 是一套组件、工具和指导，可以帮助您构建出色的 Android 应用。Android Jetpack 组件将现有的支持库与架构组件联系起来，并将它们分成四个类别：Architecture、Foundation、Behavior 以及 UI。他能够让开发者创造出更加出色的高质量应用。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://leoncommons.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://leoncommons.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android已有项目集成ReactNative</title>
    <link href="http://leoncommons.cn/2018/01/11/Android%E5%B7%B2%E6%9C%89%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90ReactNative/"/>
    <id>http://leoncommons.cn/2018/01/11/Android已有项目集成ReactNative/</id>
    <published>2018-01-11T06:47:09.000Z</published>
    <updated>2018-01-13T05:45:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道从0开始搭建ReactNative项目的话,参照官方的<a href="https://facebook.github.io/react-native/docs/getting-started.html" target="_blank" rel="external">Getting Started</a>来的话基本是没有问题的。但是如果我们想把现有的项目集成RN的话,虽然有官方的<a href="https://facebook.github.io/react-native/docs/integration-with-existing-apps.html?from=timeline" target="_blank" rel="external">Integration with Existing Apps</a>集成步骤，但是有个别的地方说的还是不清不楚，可能对于初学者埋下了坑点。本人也是第一次集成，现在讲集成的点点滴滴写出来，本文基本思路还是引用官方的集成步骤来的。</p>
<a id="more"></a>
<h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><ul>
<li>新建Android Studio工程为AndroidRnDemo,项目SDK版本等信息</li>
</ul>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//最低版本</span></div><div class="line">minSdkVersion <span class="number">19</span></div><div class="line"><span class="comment">//目标版本</span></div><div class="line">targetSdkVersion <span class="number">26</span></div><div class="line"></div><div class="line"><span class="comment">// support v7</span></div><div class="line"><span class="keyword">implementation</span> <span class="string">'com.android.support:appcompat-v7:26.1.0'</span></div><div class="line"></div><div class="line"><span class="comment">//gradle</span></div><div class="line">classpath <span class="string">'com.android.tools.build:gradle:3.0.1'</span></div></pre></td></tr></table></figure>
<ul>
<li>配置ReactNative的js环境<blockquote>
<p>我们进入到AndroidRnDemo的项目根目录，接下来我们开始在终端输入：</p>
</blockquote>
</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> init</div></pre></td></tr></table></figure>
<p>我们可以看到init让你生成一个package.json文件，当然这里里面的配置信息就是让你刚刚init填写的配置参数：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//init命令提示输入的信息</span></div><div class="line"><span class="string">name:</span> (AndroidRnDemo) androidrndemo</div><div class="line"><span class="string">version:</span> (<span class="number">1.0</span><span class="number">.0</span>) </div><div class="line"><span class="string">description:</span> </div><div class="line">entry <span class="string">point:</span> (index.js) </div><div class="line">test <span class="string">command:</span> </div><div class="line">git <span class="string">repository:</span> </div><div class="line"><span class="string">keywords:</span> </div><div class="line"><span class="string">author:</span> loen</div><div class="line"><span class="string">license:</span> (ISC) </div><div class="line"></div><div class="line"><span class="comment">//package.json</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"androidrndemo"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">"loen"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="添加ReactNative到项目"><a href="#添加ReactNative到项目" class="headerlink" title="添加ReactNative到项目"></a>添加ReactNative到项目</h2><p>接下来我们将React、ReactNative添加到项目中：</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> install --save react react-<span class="keyword">native</span></div></pre></td></tr></table></figure>
<p>安装完成之后，我们再去配置.flowconfig，这个是对js代码做约束的，建议配置（也可以不配置）。</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -o .flowconfig  https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/facebook/</span>react-native<span class="regexp">/master/</span>.flowconfig</div></pre></td></tr></table></figure>
<p>当然你也可以在项目根目录新建.flowconfig，然后把这个<a href="https://raw.githubusercontent.com/facebook/react-native/master/.flowconfig" target="_blank" rel="external">链接</a>的文件内容复制到.flowconfig中。</p>
<p>添加start到package.json文件   </p>
<blockquote>
<p>这样我们就可以时时的调用本地调试服务进行热加载了</p>
</blockquote>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"</span><span class="keyword">Error</span>: <span class="keyword">no</span> <span class="keyword">test</span> specified\<span class="string">" &amp;&amp; exit 1"</span>,</div><div class="line">    <span class="string">"start"</span>: <span class="string">"node node_modules/react-native/local-cli/cli.js start"</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<blockquote>
<p>好了，现在看下我们的项目目录吧  </p>
</blockquote>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/1515642113043.jpg" alt="基本目录"></p>
<h2 id="添加ReactNative到Android项目"><a href="#添加ReactNative到Android项目" class="headerlink" title="添加ReactNative到Android项目"></a>添加ReactNative到Android项目</h2><h4 id="添加ReactNative依赖到Android项目"><a href="#添加ReactNative依赖到Android项目" class="headerlink" title="添加ReactNative依赖到Android项目"></a>添加ReactNative依赖到Android项目</h4><blockquote>
<p>配置你的maven  </p>
</blockquote>
<p>添加ReactNative的依赖到你的app目录下的build.gradle中：</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    <span class="keyword">implementation</span> fileTree(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</div><div class="line">    <span class="keyword">implementation</span> <span class="string">'com.android.support:appcompat-v7:26.1.0'</span></div><div class="line">    ...</div><div class="line">     <span class="comment">// From node_modules.</span></div><div class="line">    api <span class="string">"com.facebook.react:react-native:+"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置项目根目录下的build.gradle：</p>
<p>这里有个小插曲：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//官方配置</span></div><div class="line"><span class="class">allprojects </span>&#123;</div><div class="line">    <span class="class">repositories </span>&#123;</div><div class="line">        ...</div><div class="line">        <span class="class">maven </span>&#123;</div><div class="line">            <span class="comment">// All of React Native (JS, Android binaries) is installed from npm</span></div><div class="line">            url <span class="string">"$rootDir/../node_modules/react-native/android"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 由于官方的android项目是放在android/目录下，所以他的路径是这样的</span></div><div class="line"><span class="string">"$rootDir/../node_modules/react-native/android"</span></div><div class="line"><span class="comment">//而我们为了方便AS编译，直接放在项目根目录配置RN的，所以这里的路径要改一下</span></div><div class="line"> url <span class="string">"$rootDir/../node_modules/react-native/android"</span></div><div class="line"> </div><div class="line"> <span class="comment">//我们的目录正确配置</span></div><div class="line"><span class="class">allprojects </span>&#123;</div><div class="line">    <span class="class">repositories </span>&#123;</div><div class="line">        <span class="class">maven </span>&#123;</div><div class="line">            url <span class="string">"$rootDir/node_modules/react-native/android"</span></div><div class="line">        &#125;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>为了防止个别机型.so库和findbugsbug问题，建议在app/build.gradle中增加下面的代码：</p>
</blockquote>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">       ndk &#123;</div><div class="line">            <span class="comment">//选择要添加的对应cpu类型的.so库。</span></div><div class="line">            abiFilters <span class="string">'armeabi'</span>, <span class="string">"armeabi-v7a"</span>,<span class="string">"armeabi-v7a"</span>,<span class="string">"x86"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//...</span></div><div class="line">    configurations<span class="selector-class">.all</span> &#123;</div><div class="line">        resolutionStrategy<span class="selector-class">.force</span> <span class="string">'com.google.code.findbugs:jsr305:3.0.0'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h4><p>添加权限：</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</div><div class="line"><span class="comment">/**设置调试 的权限**/</span></div><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.SYSTEM_ALERT_WINDOW"</span>/&gt;</div><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.SYSTEM_OVERLAY_WINDOW"</span> /&gt;</div></pre></td></tr></table></figure>
<p>添加debug模式Activity(正式打包注释掉就好了)</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;activity android:<span class="attribute">name</span>=<span class="string">"com.facebook.react.devsupport.DevSettingsActivity"</span>/&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>debug模式下需要悬浮窗的权限，这个需要手动设置，每部手机姿势不一样，具体请百度调整姿势。如果没有设置的话，个别手机在debug模式下reload会出现异常   </p>
</blockquote>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android<span class="selector-class">.view</span><span class="selector-class">.WindowManager</span><span class="variable">$BadTokenException</span>: Unable to add window android<span class="selector-class">.view</span><span class="selector-class">.ViewRootImpl</span><span class="variable">$W</span>@fc0db15 -- permission denied <span class="keyword">for</span> this window type</div></pre></td></tr></table></figure>
<h2 id="添加ReactNative界面"><a href="#添加ReactNative界面" class="headerlink" title="添加ReactNative界面"></a>添加ReactNative界面</h2><h4 id="添加index-js"><a href="#添加index-js" class="headerlink" title="添加index.js"></a>添加index.js</h4><p>首先我们在项目根目录添加index.js,这个文件作为RN的入口文件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;AppRegistry, StyleSheet, Text, View&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.hello&#125;</span>&gt;</span>Hello, World<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">container</span>: &#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">hello</span>: &#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">20</span>,</div><div class="line">    <span class="attr">textAlign</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">margin</span>: <span class="number">10</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'AndroidRnDemoApp'</span>, () =&gt; HelloWorld);</div></pre></td></tr></table></figure>
<p>注意 AppRegistry.registerComponent(‘AndroidRnDemoApp’, () =&gt; HelloWorld);里面的AndroidRnDemoApp,这个作为接下来我们要绑定的activity的入口通道名。</p>
<h4 id="配置Android动态权限—-gt-（非必须，针对targetSdk-gt-23版本（android-6-0））"><a href="#配置Android动态权限—-gt-（非必须，针对targetSdk-gt-23版本（android-6-0））" class="headerlink" title="配置Android动态权限—&gt;（非必须，针对targetSdk&gt;=23版本（android 6.0））"></a>配置Android动态权限—&gt;（非必须，针对targetSdk&gt;=23版本（android 6.0））</h4><p>我们的项目目标sdk是26，所以我们需要去代码请求窗口浮层的权限，为了方便起见呢，我们将在MainActivity里面配置这个权限：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OVERLAY_PERMISSION_REQ_CODE = <span class="number">1000</span>;</div><div class="line">    <span class="keyword">private</span> AppCompatButton mBtnRn;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initEvent();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initEvent</span><span class="params">()</span> </span>&#123;</div><div class="line">        initView();</div><div class="line">        checkAppPermission();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        mBtnRn = (AppCompatButton) findViewById(R.id.btn_rn);</div><div class="line">        mBtnRn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="comment">//跳转RN页面</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkAppPermission</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</div><div class="line">            <span class="keyword">if</span> (!Settings.canDrawOverlays(<span class="keyword">this</span>)) &#123;</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,</div><div class="line">                        Uri.parse(<span class="string">"package:"</span> + getPackageName()));</div><div class="line">                startActivityForResult(intent, OVERLAY_PERMISSION_REQ_CODE);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (requestCode == OVERLAY_PERMISSION_REQ_CODE) &#123;</div><div class="line">            <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</div><div class="line">                <span class="keyword">if</span> (!Settings.canDrawOverlays(<span class="keyword">this</span>)) &#123;</div><div class="line">                    <span class="comment">//SYSTEM_ALERT_WINDOW被拒绝</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="添加RN-Activity界面"><a href="#添加RN-Activity界面" class="headerlink" title="添加RN Activity界面"></a>添加RN Activity界面</h4><p>我们新建一个Activity作为RN界面展示的容器。这里姑且叫BaseRnActivity吧。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseRnActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">DefaultHardwareBackBtnHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ReactRootView mReactRootView;</div><div class="line">    <span class="keyword">private</span> ReactInstanceManager mReactInstanceManager;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        mReactRootView = <span class="keyword">new</span> ReactRootView(<span class="keyword">this</span>);</div><div class="line">        mReactInstanceManager = ReactInstanceManager.builder()</div><div class="line">                .setApplication(getApplication())</div><div class="line">                .setBundleAssetName(<span class="string">"index.android.bundle"</span>)</div><div class="line">                .setJSMainModulePath(<span class="string">"index"</span>)</div><div class="line">                .addPackage(<span class="keyword">new</span> MainReactPackage())</div><div class="line">                .setUseDeveloperSupport(BuildConfig.DEBUG)</div><div class="line">                .setInitialLifecycleState(LifecycleState.RESUMED)</div><div class="line">                .build();</div><div class="line"></div><div class="line">        <span class="comment">//这里的AndroidRnDemoApp必须对应“index.js”中的“AppRegistry.registerComponent()”的第一个参数</span></div><div class="line">        mReactRootView.startReactApplication(mReactInstanceManager, <span class="string">"AndroidRnDemoApp"</span>, <span class="keyword">null</span>);</div><div class="line">        <span class="comment">//加载ReactRootView到布局中</span></div><div class="line">        setContentView(mReactRootView);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">invokeDefaultOnBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onBackPressed();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * ReactInstanceManager生命周期同activity</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</div><div class="line">            mReactInstanceManager.onHostPause(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</div><div class="line">            mReactInstanceManager.onHostResume(<span class="keyword">this</span>, <span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</div><div class="line">            mReactInstanceManager.onHostDestroy(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</div><div class="line">            mReactInstanceManager.onBackPressed();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">super</span>.onBackPressed();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onKeyUp</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_MENU &amp;&amp; mReactInstanceManager != <span class="keyword">null</span>) &#123;</div><div class="line">            mReactInstanceManager.showDevOptionsDialog();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onKeyUp</span><span class="params">(keyCode, event)</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后不要忘了在AndroidManifest中添加：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">  <span class="attr">android:name</span>=<span class="string">".BaseRnActivity"</span></div><div class="line">  <span class="attr">android:theme</span>=<span class="string">"@style/Theme.AppCompat.Light.NoActionBar"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="RN打离线包到Android"><a href="#RN打离线包到Android" class="headerlink" title="RN打离线包到Android"></a>RN打离线包到Android</h2><p>由于我们在BaseRnActivity的ReactInstanceManager中setBundleAssetName(“index.android.bundle”)了android离线包，所以在运行之前我们app之前先打个离线包JSBundle到android项目中。</p>
<blockquote>
<p>首先在项目app/src/main下面必须要创建一个assets目录，然后我们就开始打离线包啦：</p>
</blockquote>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注意路径</span></div><div class="line">react-<span class="keyword">native</span> bundle --platform android --dev <span class="keyword">false</span> --entry-<span class="keyword">file</span> index.js --bundle-output app<span class="regexp">/src/m</span>ain<span class="regexp">/assets/i</span>ndex.android.bundle --assets-dest app<span class="regexp">/src/m</span>ain<span class="regexp">/res/</span></div></pre></td></tr></table></figure>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 控制台这样输出的话 ，表示打包成功</div><div class="line"><span class="symbol">Loading</span> dependency graph, done.</div><div class="line"><span class="keyword">bundle: </span>start</div><div class="line"><span class="keyword">bundle: </span>finish</div><div class="line"><span class="keyword">bundle: </span>Writing <span class="keyword">bundle </span>output to: app/src/main/assets/index.<span class="keyword">android.bundle</span></div><div class="line"><span class="keyword">bundle: </span>Done writing <span class="keyword">bundle </span>output</div></pre></td></tr></table></figure>
<h2 id="运行ReactNative"><a href="#运行ReactNative" class="headerlink" title="运行ReactNative"></a>运行ReactNative</h2><p>由于我们是已有项目集成RN,所以我们就不可以使用命令react-native run-android了。没关系我们手动编译呗。<br>我们可以在AS里面编译，当然也可以用gradle手动编译<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">./gradlew</span> build</div><div class="line"><span class="string">./gradlew</span> installDebug</div></pre></td></tr></table></figure></p>
<p>运行RN服务<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//先开启本地react native服务</span></div><div class="line">adb reverse <span class="string">tcp:</span><span class="number">8081</span> <span class="string">tcp:</span><span class="number">8081</span></div><div class="line">npm start</div></pre></td></tr></table></figure></p>
<p>这里需要注意的是连接Debug server的话，需要我们手机连接pc的代理，<a href="https://facebook.github.io/react-native/docs/running-on-device.html#docsNav" target="_blank" rel="external">具体请参考</a></p>
<p>ok 运行成功</p>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/www.jpg" alt="运行成功"></p>
<h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><ol>
<li>未添加NDK的so库</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">java<span class="selector-class">.lang</span><span class="selector-class">.UnsatisfiedLinkError</span>: could find DSO to load: libreactnativejni<span class="selector-class">.so</span></div><div class="line">java<span class="selector-class">.lang</span><span class="selector-class">.UnsatisfiedLinkError</span>: dlopen failed: <span class="string">"xxx/libgnustl_shared.so"</span> is <span class="number">32</span>-bit instead of <span class="number">64</span>-bit</div></pre></td></tr></table></figure>
<p>这个错误前面在我集成的项目中已经添加了 ，如果你没有添加，那就报错了。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">       ndk &#123;</div><div class="line">            <span class="comment">//选择要添加的对应cpu类型的.so库。</span></div><div class="line">            abiFilters <span class="string">'armeabi'</span>, <span class="string">"armeabi-v7a"</span>,<span class="string">"armeabi-v7a"</span>,<span class="string">"x86"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//...</span></div><div class="line">    configurations<span class="selector-class">.all</span> &#123;</div><div class="line">        resolutionStrategy<span class="selector-class">.force</span> <span class="string">'com.google.code.findbugs:jsr305:3.0.0'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.依赖错误：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Error:Execution failed <span class="keyword">for</span> <span class="keyword">task</span> <span class="string">':app:prepareDebugAndroidTestDependencies'</span>.</div></pre></td></tr></table></figure>
<p>在app/build.gradle中添加</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">configurations<span class="selector-class">.all</span> &#123;</div><div class="line">    resolutionStrategy<span class="selector-class">.force</span> <span class="string">'com.google.code.findbugs:jsr305:3.0.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.待补充…</p>
<h2 id="Demo地址"><a href="#Demo地址" class="headerlink" title="Demo地址"></a>Demo地址</h2><p><a href="https://github.com/leon2017/AndroidRnDemo" target="_blank" rel="external">github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道从0开始搭建ReactNative项目的话,参照官方的&lt;a href=&quot;https://facebook.github.io/react-native/docs/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Getting Started&lt;/a&gt;来的话基本是没有问题的。但是如果我们想把现有的项目集成RN的话,虽然有官方的&lt;a href=&quot;https://facebook.github.io/react-native/docs/integration-with-existing-apps.html?from=timeline&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Integration with Existing Apps&lt;/a&gt;集成步骤，但是有个别的地方说的还是不清不楚，可能对于初学者埋下了坑点。本人也是第一次集成，现在讲集成的点点滴滴写出来，本文基本思路还是引用官方的集成步骤来的。&lt;/p&gt;
    
    </summary>
    
      <category term="ReactNative" scheme="http://leoncommons.cn/categories/ReactNative/"/>
    
    
      <category term="ReactNative" scheme="http://leoncommons.cn/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>Android开发小技巧</title>
    <link href="http://leoncommons.cn/2017/12/07/Android%E5%BC%80%E5%8F%91%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://leoncommons.cn/2017/12/07/Android开发小技巧/</id>
    <published>2017-12-07T03:12:20.000Z</published>
    <updated>2017-12-07T03:39:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="android-clipChildren属性的用法"><a href="#android-clipChildren属性的用法" class="headerlink" title="android:clipChildren属性的用法"></a>android:clipChildren属性的用法</h3><blockquote>
<p>是否限制子View在父View的范围内,默认为ture<br><a id="more"></a></p>
</blockquote>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/1512556710820.jpg" alt="示例"></p>
<p>如上,我们遇到这种需求的时候,可能布局写得比较复杂，但是我们在xml的根布局添加android:clipChildren=”true”的时候我们发现，我们可以轻松的实现这样的布局。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:clipChildren</span>=<span class="string">"false"</span> //一定要在根布局添加才有效</div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.wangjun.testandroidapi.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"40dp"</span></div><div class="line">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#90c7c4c4"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"bottom"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></div><div class="line">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Material-Design-Button-Styles"><a href="#Material-Design-Button-Styles" class="headerlink" title="Material Design Button Styles"></a>Material Design Button Styles</h3><blockquote>
<p>在AppCompat Support Library 定义了几个很有用的style,当我们遇到button想要拥有统一的点击效果，又不局限与去手写selector或者ripple的时候，我们不妨试试这种：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">style=&quot;@style/Widget.AppCompat.Button.Colored&quot;</div><div class="line">style=&quot;@style/Widget.AppCompat.Button.Borderless&quot;</div><div class="line">style=&quot;@style/Widget.AppCompat.Button.Borderless.Colored&quot;</div></pre></td></tr></table></figure>
<p><img src="https://i.stack.imgur.com/8qFww.png" alt="Widget.AppCompat.Button"></p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Button</div><div class="line">    <span class="attribute">style</span>=<span class="string">"@style/Widget.AppCompat.Button"</span></div><div class="line">    android:<span class="attribute">layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    android:<span class="attribute">layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    android:<span class="attribute">text</span>=<span class="string">"@string/simple_button"</span>/&gt;</div></pre></td></tr></table></figure>
<p><img src="https://i.stack.imgur.com/Xa3cE.png" alt="Widget.AppCompat.Button.Colored"></p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Button</div><div class="line">    <span class="attribute">style</span>=<span class="string">"@style/Widget.AppCompat.Button.Colored"</span></div><div class="line">    android:<span class="attribute">layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    android:<span class="attribute">layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    android:<span class="attribute">text</span>=<span class="string">"@string/simple_button"</span>/&gt;</div></pre></td></tr></table></figure>
<p><img src="https://i.stack.imgur.com/XO8G9.png" alt="Widget.AppCompat.Button.Borderless"></p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Button</div><div class="line">    <span class="attribute">style</span>=<span class="string">"@style/Widget.AppCompat.Button.Borderless"</span></div><div class="line">    android:<span class="attribute">layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    android:<span class="attribute">layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    android:<span class="attribute">text</span>=<span class="string">"@string/simple_button"</span>/&gt;</div></pre></td></tr></table></figure>
<p><img src="https://i.stack.imgur.com/NLCc3.png" alt="Widget.AppCompat.Button.Borderless.Colored"></p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Button</div><div class="line">    <span class="attribute">style</span>=<span class="string">"@style/Widget.AppCompat.Button.Borderless.Colored"</span></div><div class="line">    android:<span class="attribute">layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    android:<span class="attribute">layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    android:<span class="attribute">text</span>=<span class="string">"@string/simple_button"</span>/&gt;</div></pre></td></tr></table></figure>
<h3 id="android-selectableItemBackground"><a href="#android-selectableItemBackground" class="headerlink" title="?android:selectableItemBackground"></a>?android:selectableItemBackground</h3><blockquote>
<p>如果你想要最快速度地给view加上点击效果，试试在xml中加上 android:background=”?android:selectableItemBackground”或者?android:selectableItemBackgroundBorderless     </p>
</blockquote>
<p>注：Android 5.0以上是ripple波纹效果，5.0以下是普通的点击效果；必须设置点击事件，否则没有效果</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?<span class="selector-tag">android</span><span class="selector-pseudo">:selectableItemBackground</span></div></pre></td></tr></table></figure>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/222222.png" alt="image"></p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.v7.widget.AppCompatTextView</div><div class="line">        android:<span class="attribute">id</span>=<span class="string">"@+id/tv_select"</span></div><div class="line">        android:<span class="attribute">layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        android:<span class="attribute">layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        android:<span class="attribute">layout_margin</span>=<span class="string">"20dp"</span></div><div class="line">        android:<span class="attribute">foreground</span>=<span class="string">"?android:selectableItemBackground"</span></div><div class="line">        android:<span class="attribute">text</span>=<span class="string">"点我点我嘛"</span>/&gt;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?<span class="selector-tag">android</span><span class="selector-pseudo">:selectableItemBackgroundBorderless</span></div></pre></td></tr></table></figure>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/2B501DF7-2046-47D4-9B86-DEC8AD629D4F.png" alt="image"></p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.v7.widget.AppCompatTextView</div><div class="line">       android:<span class="attribute">id</span>=<span class="string">"@+id/tv_select"</span></div><div class="line">       android:<span class="attribute">layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">       android:<span class="attribute">layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">       android:<span class="attribute">layout_margin</span>=<span class="string">"20dp"</span></div><div class="line">       android:<span class="attribute">foreground</span>=<span class="string">"?android:selectableItemBackgroundBorderless"</span></div><div class="line">       android:<span class="attribute">text</span>=<span class="string">"点我点我嘛"</span>/&gt;</div></pre></td></tr></table></figure>
<h3 id="TextUtils"><a href="#TextUtils" class="headerlink" title="TextUtils"></a>TextUtils</h3><blockquote>
<p><a href="http://developer.android.com/intl/zh-cn/reference/android/text/TextUtils.html" target="_blank" rel="external">link</a>字符串处理工具类</p>
<ul>
<li>TextUtils.equals(CharSequence a, CharSequence b)</li>
</ul>
</blockquote>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">StringBuilder stringBuilder=<span class="keyword">new</span> StringBuilder(<span class="string">"a"</span>); </div><div class="line">StringBuffer stringBuffer=<span class="keyword">new</span> StringBuffer(<span class="string">"a"</span>);</div><div class="line">TextUtils.<span class="keyword">equals</span>(<span class="string">"a"</span>, <span class="string">"a"</span>); <span class="comment">//true</span></div><div class="line">TextUtils.<span class="keyword">equals</span>(<span class="string">"a"</span>,stringBuilder); <span class="comment">//true</span></div><div class="line">TextUtils.<span class="keyword">equals</span>(<span class="string">"a"</span>,stringBuffer); <span class="comment">//true</span></div><div class="line">TextUtils.<span class="keyword">equals</span>(<span class="string">"a"</span>, <span class="literal">null</span>); <span class="comment">//false</span></div></pre></td></tr></table></figure>
<ul>
<li>split(String text, Pattern pattern)</li>
</ul>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">TextUtils.<span class="built_in">split</span>(<span class="built_in">line</span>, <span class="string">"-"</span>); <span class="comment">//错误用法</span></div><div class="line">TextUtils.<span class="built_in">split</span>(<span class="built_in">line</span>, <span class="string">",\\-"</span>);</div><div class="line"><span class="comment">// 注意特殊字符</span></div></pre></td></tr></table></figure>
<ul>
<li>isEmpty()</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">TextUtils</span><span class="selector-class">.isEmpty</span>(<span class="string">""</span>) <span class="comment">//true</span></div><div class="line"><span class="selector-tag">TextUtils</span><span class="selector-class">.isEmpty</span>(<span class="string">"null"</span>) <span class="comment">//false</span></div><div class="line"><span class="selector-tag">TextUtils</span><span class="selector-class">.isEmpty</span>(null) <span class="comment">//true</span></div></pre></td></tr></table></figure>
<ul>
<li><p>htmlEncode<br>使用HTML编码这个字符串,将’&lt;’’&gt;’’&amp;’等转义为对应的字符串</p>
</li>
<li><p>isDigitsOnly<br>判断字符串中是否只有数字</p>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">TextUtils</span><span class="selector-class">.isDigitsOnly</span>(<span class="string">"1223444"</span>) <span class="comment">//true</span></div><div class="line"><span class="selector-tag">TextUtils</span><span class="selector-class">.isDigitsOnly</span>(<span class="string">"12234dddd44"</span>) <span class="comment">//false</span></div></pre></td></tr></table></figure>
<h3 id="selector设置特殊效果"><a href="#selector设置特殊效果" class="headerlink" title="selector设置特殊效果"></a>selector设置特殊效果</h3><blockquote>
<p>通过android:enterFadeDuration以及android:exitFadeDuration,设置此属性可以使状态变换时会有淡入淡出的效果</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">android:enterFadeDuration</span>=<span class="string">"@android:integer/config_shortAnimTime"</span></div><div class="line">          <span class="attr">android:exitFadeDuration</span>=<span class="string">"@android:integer/config_shortAnimTime"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">"true"</span> <span class="attr">android:drawable</span>=<span class="string">"@color/colorAccent"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_focused</span>=<span class="string">"true"</span> <span class="attr">android:drawable</span>=<span class="string">"@color/colorAccent"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@android:color/transparent"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="android-clipToPadding"><a href="#android-clipToPadding" class="headerlink" title="android:clipToPadding"></a>android:clipToPadding</h3><blockquote>
<p>有时候我们在listview设计时会有一些内边距的要求，这时候就比较尴尬，有人说直接用padding不就可以解决这个问题了吗？但是用完后有人发现在上下拉动整个内容时会看到有一个白色的内边距在那里，非常的丑，这时候我们就需要用到Listview的一个强大的属性：android:clipToPadding=false，默认android:clipToPadding=true的。</p>
</blockquote>
<p><img src="https://i.stack.imgur.com/Ymbrj.gif" alt="image"></p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;ListView</div><div class="line">    android:<span class="attribute">id</span>=<span class="string">"@+id/list"</span></div><div class="line">    android:<span class="attribute">clipToPadding</span>=<span class="string">"false"</span></div><div class="line">    android:<span class="attribute">paddingTop</span>=<span class="string">"50dip"</span></div><div class="line">    android:<span class="attribute">layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    android:<span class="attribute">layout_height</span>=<span class="string">"match_parent"</span>&gt;</div></pre></td></tr></table></figure>
<h3 id="继续更新…"><a href="#继续更新…" class="headerlink" title="继续更新…"></a>继续更新…</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;android-clipChildren属性的用法&quot;&gt;&lt;a href=&quot;#android-clipChildren属性的用法&quot; class=&quot;headerlink&quot; title=&quot;android:clipChildren属性的用法&quot;&gt;&lt;/a&gt;android:clipChildren属性的用法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;是否限制子View在父View的范围内,默认为ture&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://leoncommons.cn/categories/Android/"/>
    
    
      <category term="小技巧" scheme="http://leoncommons.cn/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Calabash-Android使用教程（一）</title>
    <link href="http://leoncommons.cn/2017/12/01/Calabash-Android%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B(%E4%B8%80%EF%BC%89/"/>
    <id>http://leoncommons.cn/2017/12/01/Calabash-Android使用教程(一）/</id>
    <published>2017-12-01T08:04:45.000Z</published>
    <updated>2017-12-06T08:01:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Calabash-Android环境搭建"><a href="#Calabash-Android环境搭建" class="headerlink" title="Calabash-Android环境搭建"></a>Calabash-Android环境搭建</h2><blockquote>
<p>本文系统环境基于Mac OX</p>
</blockquote>
<h3 id="安装ruby"><a href="#安装ruby" class="headerlink" title="安装ruby"></a>安装ruby</h3><blockquote>
<p>正常mac系统下已经安装过ruby了，如果没有安装请安装ruby，calabash支持需要ruby&gt;=2.0。       </p>
</blockquote>
<p>安装ruby</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>ruby</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="安装Android-SDK-并配置环境"><a href="#安装Android-SDK-并配置环境" class="headerlink" title="安装Android SDK 并配置环境"></a>安装Android SDK 并配置环境</h3><blockquote>
<p>下载<a href="http://developer.android.com/sdk/index.html" target="_blank" rel="external">Android Stuidio</a>，请自行准备梯子<br>Android Studio需要Java Development Kit [JDK] 1.8。你可以在命令行中输入 javac -version来查看你当前安装的JDK版本，未安装的话可以到<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">官网</a>上下载。<br>Android Stuidio安装完成后，在Android Studio的启动欢迎界面中选择Configure | SDK Manager。</p>
</blockquote>
<p><img src="http://reactnative.cn/static/docs/0.50/img/react-native-android-studio-configure-sdk.png" alt="image">   </p>
<ul>
<li>在SDK Platforms窗口中，选择Show Package Details，然后在Android 6.0 (Marshmallow)中勾选Google APIs、Android SDK Platform 23、Intel x86 Atom System Image、Intel x86 Atom_64 System Image以及Google APIs Intel x86 Atom_64 System Image。然后在Android SDK Build Tools中勾选Android SDK Build-Tools 具体的可以根据自己需求自行配置</li>
</ul>
<p><img src="http://reactnative.cn/static/docs/0.50/img/react-native-android-studio-android-sdk-platforms.png" alt="image"></p>
<p><img src="http://reactnative.cn/static/docs/0.50/img/react-native-android-studio-android-sdk-build-tools.png" alt="image"></p>
<ul>
<li>配置 ANDROID_HOME环境变量<blockquote>
<p>确保ANDROID_HOME环境变量正确地指向了你安装的Android SDK的路径。具体的做法是把下面的命令加入到~/.bash_profile文件中：(译注：~表示用户目录，即/Users/你的用户名/，而小数点开头的文件在Finder中是隐藏的，并且这个文件有可能并不存在。请在终端下使用vi ~/.bash_profile命令创建或编辑）。如果你的命令行不是bash，而是例如zsh等其他，请使用对应的配置文件。</p>
</blockquote>
</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 如果你不是通过Android Studio安装的sdk，则其路径可能不同，请自行确定清楚。</span></div><div class="line"><span class="builtin-name">export</span> <span class="attribute">ANDROID_HOME</span>=~/Library/Android/sdk</div><div class="line"></div><div class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools</div></pre></td></tr></table></figure>
<blockquote>
<p>然后使用下列命令使其立即生效（否则重启后才生效）：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ~/.bash_profile</div><div class="line">// 可以使用<span class="built_in">echo</span> <span class="variable">$ANDROID_HOME</span>检查此变量是否已正确设置。</div></pre></td></tr></table></figure>
<h3 id="安装calabash-android"><a href="#安装calabash-android" class="headerlink" title="安装calabash-android"></a>安装calabash-android</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo gem <span class="keyword">install </span>calabash-<span class="keyword">android</span></div><div class="line"><span class="comment"># 如果出现安装不了，你的梯子准备好了吗</span></div></pre></td></tr></table></figure>
<h3 id="初始化项目测试项目"><a href="#初始化项目测试项目" class="headerlink" title="初始化项目测试项目"></a>初始化项目测试项目</h3><blockquote>
<p>接下来我们来创建一个calabash项目</p>
</blockquote>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在终端上执行</span></div><div class="line">calabash-<span class="keyword">android </span>gen</div></pre></td></tr></table></figure>
<p>这样项目就创建完成了</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">JundeMacBook-Pro:testdemo2 xxx: calabash-android gen</div><div class="line"></div><div class="line">----------Question----------</div><div class="line">I'm about to create a subdirectory called features.</div><div class="line">features will contain all your calabash tests.</div><div class="line"><span class="section">Please hit return to confirm that's what you want.</span></div><div class="line">---------------------------</div><div class="line"></div><div class="line"></div><div class="line">----------Info----------</div><div class="line"><span class="section">features subdirectory created.</span></div><div class="line">---------------------------</div><div class="line">JundeMacBook-Pro:testdemo2 junwang$</div></pre></td></tr></table></figure>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/calabash-demo.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Calabash-Android环境搭建&quot;&gt;&lt;a href=&quot;#Calabash-Android环境搭建&quot; class=&quot;headerlink&quot; title=&quot;Calabash-Android环境搭建&quot;&gt;&lt;/a&gt;Calabash-Android环境搭建&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;本文系统环境基于Mac OX&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装ruby&quot;&gt;&lt;a href=&quot;#安装ruby&quot; class=&quot;headerlink&quot; title=&quot;安装ruby&quot;&gt;&lt;/a&gt;安装ruby&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;正常mac系统下已经安装过ruby了，如果没有安装请安装ruby，calabash支持需要ruby&amp;gt;=2.0。       &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;安装ruby&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;brew &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;install &lt;/span&gt;ruby&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="自动化测试" scheme="http://leoncommons.cn/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Calabash" scheme="http://leoncommons.cn/tags/Calabash/"/>
    
  </entry>
  
  <entry>
    <title>JAVA8使用笔记（二）</title>
    <link href="http://leoncommons.cn/2017/11/27/Java8%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0(%E4%BA%8C%EF%BC%89/"/>
    <id>http://leoncommons.cn/2017/11/27/Java8使用笔记(二）/</id>
    <published>2017-11-27T02:20:20.000Z</published>
    <updated>2017-12-06T08:01:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><ul>
<li>reduce<blockquote>
<p>1 、元素求和操作</p>
</blockquote>
</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 普通的for-each求和方式</span></div><div class="line"><span class="keyword">public</span> <span class="literal">void</span> sumReduce()&#123;</div><div class="line">        <span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; testList = Arrays.asList(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</div><div class="line">        int <span class="keyword">sum</span> = <span class="number">0</span>;</div><div class="line">        for (<span class="built_in">Integer</span> <span class="built_in">integer</span> : testList) &#123;</div><div class="line">            <span class="keyword">sum</span> += <span class="built_in">integer</span>;</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="keyword">sum</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// reduce 进行求和操作</span></div><div class="line"><span class="type">int</span> tempSum = testList.<span class="keyword">stream</span>()</div><div class="line">                .reduce(<span class="number">0</span>, (a, b) -&gt; a + b);</div><div class="line">System.<span class="keyword">out</span>.println(tempSum);</div><div class="line"><span class="comment">// 输出19</span></div></pre></td></tr></table></figure>
<blockquote>
<p>reduce接受两个参数：<br>1.一个初始值，这里给的是0，<br>2.一个BinaryOperator<t> 来将两个进行组合产生新的值。这里我们用的是（a,b）-&gt; a+b进行求和</t></p>
<p>reduce还有一个重载的方法，他不接受初始值，但会返回一个Optional对象<br><a id="more"></a></p>
</blockquote>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Optional&lt;Integer&gt; optional = testList.stream()</div><div class="line">                .reduce<span class="function"><span class="params">((a, b) -&gt; a * b)</span>;</span></div><div class="line"><span class="title">optional</span>.<span class="title">ifPresent</span><span class="params">(p -&gt; &#123;</span></div><div class="line">            System.out.println(p);</div><div class="line">        &#125;);</div><div class="line">// 输出 360</div></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>最大值和最小值<br>如果我们希望能够在给定的集合中求出最大值的话。我们可以这样写，reduce操作会针对流中的元素进行比对，并产生一个新的最大值，指导整个流消耗完。如果要计算最小值得话需要Integer:min来替换Integer:max就好了</li>
</ol>
</blockquote>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//max</span></div><div class="line"><span class="selector-tag">testList</span><span class="selector-class">.stream</span>()</div><div class="line">                <span class="selector-class">.reduce</span>(<span class="attribute">Integer</span>::max)</div><div class="line">                <span class="selector-class">.ifPresent</span>(m -&gt; System.out.println(m));</div><div class="line"><span class="comment">// 输出 6</span></div></pre></td></tr></table></figure>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">testList</span><span class="selector-class">.stream</span>()</div><div class="line">                <span class="selector-class">.reduce</span>(<span class="attribute">Integer</span>::min)</div><div class="line">                <span class="selector-class">.ifPresent</span>(m -&gt; System.out.println(m));</div><div class="line"><span class="comment">// 输出1</span></div></pre></td></tr></table></figure>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 当然我们可以使用三位运算</span></div><div class="line">        <span class="selector-tag">testList</span><span class="selector-class">.stream</span>()</div><div class="line">                <span class="selector-class">.reduce</span>((x,y)-&gt; x&lt; y? <span class="attribute">x</span>:y)</div><div class="line">                <span class="selector-class">.ifPresent</span>(y-&gt; System.out.println(y));</div><div class="line"><span class="comment">// 输出1</span></div></pre></td></tr></table></figure>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用Integer::compareTo比较操作</span></div><div class="line"><span class="selector-tag">testList</span><span class="selector-class">.stream</span>()</div><div class="line">                <span class="selector-class">.reduce</span>(<span class="attribute">Integer</span>::compareTo)</div><div class="line">                <span class="selector-class">.ifPresent</span>(x-&gt; System.out.println(x));</div><div class="line"><span class="comment">// 输出-1</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注： stream并不适合做并行操作，如果需要并行求和时候，可以将stream()换成parallelStream()  </p>
<p>3.数值流操作</p>
</blockquote>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 求和操作</span></div><div class="line"> <span class="keyword">Integer</span> sum1 = testList.stream()</div><div class="line">                .map(d -&gt; d * <span class="number">10</span>)</div><div class="line">                .reduce(<span class="number">0</span>, <span class="keyword">Integer</span>::<span class="keyword">sum</span>);</div><div class="line"> <span class="keyword">System</span>.out.println(sum1);</div><div class="line"> <span class="comment">//输出190</span></div></pre></td></tr></table></figure>
<blockquote>
<p>上面的代码我们知道了reduce的求和操作，但是我们发现reduce对元素类型进行了装箱再进行求和操作。如果我们想进行原始类型流的转换我们可以试一试下面的方法。</p>
</blockquote>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//求和</span></div><div class="line"><span class="type">int</span> sum2 = testList.<span class="keyword">stream</span>()</div><div class="line">                .mapToInt(d -&gt; d * <span class="number">10</span>)</div><div class="line">                .sum();</div><div class="line">System.<span class="keyword">out</span>.println(sum2);</div><div class="line"><span class="comment">//输出190</span></div></pre></td></tr></table></figure>
<blockquote>
<p>这段代码我们知道我们可以通过mapToInt对原始类型的流进行求和操作。当然不仅有mapToInt，还有mapToDouble、mapToLong。</p>
</blockquote>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">IntStream intStream = testList.<span class="keyword">stream</span>()</div><div class="line">IntStream intStream = testList.<span class="keyword">stream</span>()</div><div class="line">               .mapToInt(d -&gt; d * <span class="number">10</span>);</div><div class="line">OptionalInt <span class="built_in">max</span> = intStream.<span class="built_in">max</span>();</div><div class="line"><span class="type">int</span> asInt = <span class="built_in">max</span>.getAsInt();</div><div class="line">System.<span class="keyword">out</span>.println(asInt);</div><div class="line"><span class="comment">//输出60</span></div></pre></td></tr></table></figure>
<blockquote>
<p>mapToInt等对流的操作返回的是一个IntStream流，如果你要进行最大操作，可以使用max()，他返回的是一个OptionalInt，他属于Optional类特别的版本：OptionalInt、OptionalLong、OptionalDouble</p>
</blockquote>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">int</span> <span class="built_in">max1</span> = testList.stream()</div><div class="line">                .mapToInt(d -&gt; d * <span class="number">10</span>)</div><div class="line">                .<span class="built_in">max</span>()</div><div class="line">                .orElse(<span class="number">100</span>);</div><div class="line">System.<span class="keyword">out</span>.println(<span class="built_in">max1</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>如上，如果你不知道有没有最大值的话 ，你想给他定义一个默认最大值的话，可以利用orElse对其进行操作</p>
</blockquote>
<h3 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h3><blockquote>
<p>Java8引入了可以用于IntStream和LongStream可以帮助生成数值的范围range和rangeClose。这两个方法第一个参数接受起始值，第二个参数接受结束值。但是range是不包含结束值，而rangeClosed则包含结束值。  </p>
</blockquote>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span> <span class="keyword">count</span> = IntStream.range(<span class="number">1</span>, <span class="number">10</span>)</div><div class="line">               .<span class="keyword">count</span>();</div><div class="line">System.out.<span class="keyword">println</span>(<span class="keyword">count</span>);</div><div class="line"><span class="comment">//输出9</span></div><div class="line"></div><div class="line"><span class="keyword">long</span> count1 = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">10</span>)</div><div class="line">               .<span class="keyword">count</span>();</div><div class="line">System.out.<span class="keyword">println</span>(count1);</div><div class="line"><span class="comment">//输出10</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;操作符&quot;&gt;&lt;a href=&quot;#操作符&quot; class=&quot;headerlink&quot; title=&quot;操作符&quot;&gt;&lt;/a&gt;操作符&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;reduce&lt;blockquote&gt;
&lt;p&gt;1 、元素求和操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight lasso&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 普通的for-each求和方式&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;void&lt;/span&gt; sumReduce()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;Integer&lt;/span&gt;&amp;gt; testList = Arrays.asList(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        int &lt;span class=&quot;keyword&quot;&gt;sum&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for (&lt;span class=&quot;built_in&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt; : testList) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;sum&lt;/span&gt; += &lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;keyword&quot;&gt;sum&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight glsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// reduce 进行求和操作&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; tempSum = testList.&lt;span class=&quot;keyword&quot;&gt;stream&lt;/span&gt;()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                .reduce(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, (a, b) -&amp;gt; a + b);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.&lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt;.println(tempSum);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出19&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;reduce接受两个参数：&lt;br&gt;1.一个初始值，这里给的是0，&lt;br&gt;2.一个BinaryOperator&lt;t&gt; 来将两个进行组合产生新的值。这里我们用的是（a,b）-&amp;gt; a+b进行求和&lt;/t&gt;&lt;/p&gt;
&lt;p&gt;reduce还有一个重载的方法，他不接受初始值，但会返回一个Optional对象&lt;br&gt;
    
    </summary>
    
      <category term="JAVA8" scheme="http://leoncommons.cn/categories/JAVA8/"/>
    
    
      <category term="JAVA8使用笔记" scheme="http://leoncommons.cn/tags/JAVA8%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JAVA8使用笔记（一）</title>
    <link href="http://leoncommons.cn/2017/11/24/Java8%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0(%E4%B8%80)/"/>
    <id>http://leoncommons.cn/2017/11/24/Java8使用笔记(一)/</id>
    <published>2017-11-24T10:12:40.000Z</published>
    <updated>2017-12-06T08:02:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>java8 — Stream流操作</p>
<h3 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h3></blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// model</span></div><div class="line"><span class="keyword">package</span> com.wangj.java8demo;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dish</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> vegetarian;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Type type;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dish</span><span class="params">(String name, <span class="keyword">boolean</span> vegetarian, <span class="keyword">int</span> calories, Type type)</span> </span>&#123; <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.vegetarian = vegetarian;</div><div class="line">        <span class="keyword">this</span>.calories = calories;</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isVegetarian</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> vegetarian;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCalories</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> calories;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> type;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Type &#123; MEAT, FISH, OTHER &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 演示demo</span></div><div class="line"><span class="keyword">package</span> com.wangj.java8demo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.stream.Stream;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toList;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOne</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doIt</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;Dish&gt; menu = Arrays.asList(</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"pork"</span>, <span class="keyword">false</span>, <span class="number">800</span>, Dish.Type.MEAT),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"beef"</span>, <span class="keyword">false</span>, <span class="number">700</span>, Dish.Type.MEAT),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"chicken"</span>, <span class="keyword">false</span>, <span class="number">400</span>, Dish.Type.MEAT),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"french fries"</span>, <span class="keyword">true</span>, <span class="number">530</span>, Dish.Type.OTHER),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"rice"</span>, <span class="keyword">true</span>, <span class="number">350</span>, Dish.Type.OTHER),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"season fruit"</span>, <span class="keyword">true</span>, <span class="number">120</span>, Dish.Type.OTHER),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"pizza"</span>, <span class="keyword">true</span>, <span class="number">550</span>, Dish.Type.OTHER),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"prawns"</span>, <span class="keyword">false</span>, <span class="number">300</span>, Dish.Type.FISH),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"salmon"</span>, <span class="keyword">false</span>, <span class="number">450</span>, Dish.Type.FISH));</div><div class="line"></div><div class="line">        List&lt;String&gt; collect = menu.stream()<span class="comment">//从menu获得stream流</span></div><div class="line">                .filter(Dish::isVegetarian) <span class="comment">//筛选出isVegetarian == true的对象</span></div><div class="line">                .map(Dish::getName)<span class="comment">//转换并获取name</span></div><div class="line">                .limit(<span class="number">3</span>)<span class="comment">//只获取前三个</span></div><div class="line">                .collect(toList());<span class="comment">//将结果存在另一个List中</span></div><div class="line">        System.out.println(collect);</div><div class="line">        <span class="comment">//流只能消费一次，要想获取只能获得新的stream重新来一次</span></div><div class="line">        Stream&lt;Dish&gt; menuStream = menu.stream();</div><div class="line">        menuStream.forEach(dish -&gt; System.out.println(dish.getName()));<span class="comment">//采用forEach迭代操作</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        TestOne testOne = <span class="keyword">new</span> TestOne();</div><div class="line">        testOne.doIt();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// system out</span></div><div class="line"></div><div class="line">[french fries, rice, season fruit]</div><div class="line">pork</div><div class="line">beef</div><div class="line">chicken</div><div class="line">french fries</div><div class="line">rice</div><div class="line">season fruit</div><div class="line">pizza</div><div class="line">prawns</div><div class="line">salmon</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><ol>
<li>for-each 迭代</li>
</ol>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; names = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (Dish dish : menu) &#123;</div><div class="line">            names.add(dish.getName());</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<ol>
<li>Iterator迭代</li>
</ol>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">List</span>&lt;<span class="keyword">String&gt; </span>names = new ArrayList&lt;&gt;()<span class="comment">;</span></div><div class="line">       <span class="keyword">Iterator&lt;Dish&gt; </span><span class="keyword">iterator </span>= menu.<span class="keyword">iterator();</span></div><div class="line">       <span class="meta">while</span> (<span class="keyword">iterator.hasNext()) </span>&#123;</div><div class="line">           Dish dish = <span class="keyword">iterator.next();</span></div><div class="line">           names.<span class="keyword">add(dish.getName());</span></div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<ol>
<li>流</li>
</ol>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; names = menu.stream()</div><div class="line">                .<span class="built_in">map</span>(Dish<span class="type">::getName</span>)</div><div class="line">                .collect(toList());</div></pre></td></tr></table></figure>
<h3 id="使用流"><a href="#使用流" class="headerlink" title="使用流"></a>使用流</h3><blockquote>
<p>总而言之，流的使用一般包括：</p>
<ul>
<li>[x] 一个数据源(如集合)来执行一个查询操作，如List<t>.stream();</t></li>
<li>[x] 一个中间操作链，形成一个水管从上游到下游的一系列操作，如filter、map、limit等。</li>
<li>[x] 一个终端操作，执行流水线操作，产生想要的结果,如 forEach、count 、collect等</li>
</ul>
</blockquote>
<h4 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h4><ul>
<li>filter<blockquote>
<p>顾名思义，就是做过滤筛选处理的。他会接受一个返回boolean的函数作为参数</p>
</blockquote>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">menu</span><span class="selector-class">.stream</span>()</div><div class="line">               <span class="selector-class">.filter</span>(dish -&gt; dish.getCalories()&gt;<span class="number">300</span>)<span class="comment">//过滤calories&gt;300的操作</span></div><div class="line">               <span class="selector-class">.collect</span>(toList());</div></pre></td></tr></table></figure>
<ul>
<li><p>distinct</p>
<blockquote>
<p>distinct根据元素对象的hashCode和equals方法实现去重操作</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">List</span>&lt;Integer&gt; <span class="keyword">numList</span> = Arrays.asList(1, 2, 3, 4, 5, 3, 2, 4);</div><div class="line">        <span class="keyword">numList</span>.stream()</div><div class="line">                .filter(integer -&gt; integer % 2 == 0) <span class="comment">// 2 4 2 4</span></div><div class="line">                .<span class="keyword">distinct</span>()  <span class="comment">// 2 4</span></div><div class="line">                .<span class="keyword">forEach</span>(System.<span class="keyword">out</span>::println);</div><div class="line"><span class="comment">// 输出 2 4</span></div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>limit</p>
<blockquote>
<p>流支持limit(n)限定操作，如果流失有序的，那么该操作最多会返回前n个元素。</p>
</blockquote>
</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> List&lt;String&gt; <span class="keyword">collect</span> = menu.stream()</div><div class="line">                .filter(Dish::isVegetarian)</div><div class="line">                .map(Dish::getName)</div><div class="line">                .limit(<span class="number">3</span>)</div><div class="line">                .<span class="keyword">collect</span>(<span class="keyword">toList</span>());</div><div class="line">        System.out.<span class="keyword">println</span>(<span class="keyword">collect</span>);</div><div class="line">        </div><div class="line"><span class="comment">//输出 [fries, rice, fruit]</span></div></pre></td></tr></table></figure>
<ul>
<li>skip<blockquote>
<p>流支持skip(n)操作,返回一个将前n个元素直接跳过的流，如果流中的元素不足n个，则返回一个空流，值得注意的的是skip和limit是互补的。</p>
</blockquote>
</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; collect = menu.stream()</div><div class="line">                .filter(Dish<span class="type">::isVegetarian</span>)</div><div class="line">                .<span class="built_in">map</span>(Dish<span class="type">::getName</span>)</div><div class="line">                .limit(<span class="number">3</span>)</div><div class="line">                .<span class="keyword">skip</span>(<span class="number">2</span>)</div><div class="line">                .collect(toList());</div><div class="line">        System.out.println(collect);</div><div class="line"><span class="comment">//输出 [fruit]</span></div></pre></td></tr></table></figure>
<ul>
<li>map<blockquote>
<p>map操作符接受的是一个函数对象作为参数，他会将流发射的每一个信号元素进行转换成一个新的信号。</p>
</blockquote>
</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; <span class="keyword">collect</span> = menu.stream()</div><div class="line">                .map(Dish::getName)</div><div class="line">                .<span class="keyword">collect</span>(<span class="keyword">toList</span>());</div><div class="line">        System.out.<span class="keyword">println</span>(<span class="keyword">collect</span>);</div><div class="line"><span class="comment">// 输出 [pork, beef, chicken, fries, rice, fruit, pizza, prawns, salmon]</span></div></pre></td></tr></table></figure>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; collect = menu.stream()</div><div class="line">                .<span class="built_in">map</span>(Dish<span class="type">::getName</span>)</div><div class="line">                .<span class="built_in">map</span>(<span class="built_in">String</span><span class="type">::length</span>)</div><div class="line">                .collect(toList());</div><div class="line">        System.out.println(collect);</div><div class="line"><span class="comment">//输出[4, 4, 7, 5, 4, 5, 5, 6, 6]</span></div><div class="line"><span class="comment">//流的链式处理接收的为上一个流操作的处理结果</span></div></pre></td></tr></table></figure>
<ul>
<li>flatMap <blockquote>
<p>map 生成的是个 1:1 映射，每个输入元素，都按照规则转换成为另外一个元素。还有一些场景，是一对多映射关系的，这时需要 flatMap。flatMap操作符让你吧流中的每个值都换成另一个流，然后把所有的流连起来成为一个流</p>
</blockquote>
</li>
</ul>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Stream&lt;List&lt;Integer&gt;&gt; inputStream = Stream.<span class="keyword">of</span>(</div><div class="line">                Arrays.asList(<span class="number">1</span>),</div><div class="line">                Arrays.asList(<span class="number">2</span>, <span class="number">3</span>),</div><div class="line">                Arrays.asList(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</div><div class="line">        );</div><div class="line">        List&lt;Integer&gt; integerList = inputStream</div><div class="line">                .flatMap<span class="function"><span class="params">((childList) -&gt; childList.stream())</span></span></div><div class="line">                .<span class="title">collect</span><span class="params">(toList())</span>;</div><div class="line">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(integerList)</span>;</div><div class="line">//输出[1, 2, 3, 4, 5, 6]</div></pre></td></tr></table></figure>
<ul>
<li>anyMatch—至少一个满足条件<blockquote>
<p>检查流中是否有一个元素能够匹配anyMatch中的给定元素,该操作返回一个boolean。只要返回的结果有一个达到满足的条件则认定该满足条件。他是一个最终结果操作不是中间操作,</p>
</blockquote>
</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">boolean </span><span class="keyword">b </span>= menu.<span class="keyword">stream()</span></div><div class="line">                .anyMatch(Dish::isVegetarian)<span class="comment">;</span></div><div class="line">        System.out.println(<span class="keyword">b);</span></div><div class="line">// 输出 true</div></pre></td></tr></table></figure>
<ul>
<li><p>allMatch –所有满足条件</p>
<blockquote>
<p>allMatch跟anyMatch类似，他会判定流中的元素是否都能满足allMatch给定的参数</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">boolean </span><span class="keyword">b </span>= menu.<span class="keyword">stream()</span></div><div class="line">                .allMatch(Dish::isVegetarian)<span class="comment">;</span></div><div class="line">        System.out.println(<span class="keyword">b);</span></div><div class="line">// 输出 false</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>noneMatch —所有不满足条件</p>
<blockquote>
<p>noneMatch和allMatch对立，他会判定流中的元素是否都不能满足noneMatch给定的参数</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">boolean </span><span class="keyword">b </span>= menu.<span class="keyword">stream()</span></div><div class="line">                .noneMatch(Dish::isVegetarian)<span class="comment">;</span></div><div class="line">        System.out.println(<span class="keyword">b);</span></div><div class="line">// 输出 false</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>findAny</p>
<blockquote>
<p>他返回一个Optional类，待研究。。。</p>
</blockquote>
</li>
<li>findFirst<blockquote>
<p>有些流我们需要找到操作的第一个元素，findFirst是一个不错的方法。</p>
</blockquote>
</li>
</ul>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">menu.stream()</div><div class="line">                .<span class="function"><span class="title">map</span>(dish1 -&gt;</span> dish.getCalories())</div><div class="line">                .<span class="function"><span class="title">filter</span>(f -&gt;</span> f &gt; <span class="number">300</span>)</div><div class="line">                .findFirst()</div><div class="line">                .<span class="function"><span class="title">ifPresent</span>(d-&gt;</span> &#123;</div><div class="line">                    System.out.println(d);</div><div class="line">                &#125;);</div><div class="line"><span class="comment">//输出 530</span></div></pre></td></tr></table></figure>
<h3 id="下班啦！！！"><a href="#下班啦！！！" class="headerlink" title="下班啦！！！"></a>下班啦！！！</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;java8 — Stream流操作&lt;/p&gt;
&lt;h3 id=&quot;演示代码&quot;&gt;&lt;a href=&quot;#演示代码&quot; class=&quot;headerlink&quot; title=&quot;演示代码&quot;&gt;&lt;/a&gt;演示代码&lt;/h3&gt;&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// model&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.wangj.java8demo;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Dish&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; vegetarian;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; calories;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Type type;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Dish&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name, &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; vegetarian, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; calories, Type type)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.vegetarian = vegetarian;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.calories = calories;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.type = type;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isVegetarian&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; vegetarian;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getCalories&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; calories;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Type &lt;span class=&quot;title&quot;&gt;getType&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; type;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; Type &amp;#123; MEAT, FISH, OTHER &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 演示demo&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.wangj.java8demo;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Arrays;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.stream.Stream;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; java.util.stream.Collectors.toList;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestOne&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doIt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        List&amp;lt;Dish&amp;gt; menu = Arrays.asList(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Dish(&lt;span class=&quot;string&quot;&gt;&quot;pork&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;800&lt;/span&gt;, Dish.Type.MEAT),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Dish(&lt;span class=&quot;string&quot;&gt;&quot;beef&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;700&lt;/span&gt;, Dish.Type.MEAT),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Dish(&lt;span class=&quot;string&quot;&gt;&quot;chicken&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;, Dish.Type.MEAT),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Dish(&lt;span class=&quot;string&quot;&gt;&quot;french fries&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;530&lt;/span&gt;, Dish.Type.OTHER),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Dish(&lt;span class=&quot;string&quot;&gt;&quot;rice&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;350&lt;/span&gt;, Dish.Type.OTHER),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Dish(&lt;span class=&quot;string&quot;&gt;&quot;season fruit&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;120&lt;/span&gt;, Dish.Type.OTHER),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Dish(&lt;span class=&quot;string&quot;&gt;&quot;pizza&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;550&lt;/span&gt;, Dish.Type.OTHER),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Dish(&lt;span class=&quot;string&quot;&gt;&quot;prawns&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;, Dish.Type.FISH),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Dish(&lt;span class=&quot;string&quot;&gt;&quot;salmon&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;450&lt;/span&gt;, Dish.Type.FISH));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        List&amp;lt;String&amp;gt; collect = menu.stream()&lt;span class=&quot;comment&quot;&gt;//从menu获得stream流&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                .filter(Dish::isVegetarian) &lt;span class=&quot;comment&quot;&gt;//筛选出isVegetarian == true的对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                .map(Dish::getName)&lt;span class=&quot;comment&quot;&gt;//转换并获取name&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                .limit(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;//只获取前三个&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                .collect(toList());&lt;span class=&quot;comment&quot;&gt;//将结果存在另一个List中&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(collect);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//流只能消费一次，要想获取只能获得新的stream重新来一次&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Stream&amp;lt;Dish&amp;gt; menuStream = menu.stream();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        menuStream.forEach(dish -&amp;gt; System.out.println(dish.getName()));&lt;span class=&quot;comment&quot;&gt;//采用forEach迭代操作&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        TestOne testOne = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TestOne();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        testOne.doIt();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// system out&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[french fries, rice, season fruit]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pork&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;beef&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;chicken&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;french fries&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rice&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;season fruit&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pizza&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;prawns&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;salmon&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JAVA8" scheme="http://leoncommons.cn/categories/JAVA8/"/>
    
    
      <category term="JAVA8使用笔记" scheme="http://leoncommons.cn/tags/JAVA8%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Android自定义View(一)</title>
    <link href="http://leoncommons.cn/2017/11/13/Android%E8%87%AA%E5%AE%9A%E4%B9%89View(%E4%B8%80)/"/>
    <id>http://leoncommons.cn/2017/11/13/Android自定义View(一)/</id>
    <published>2017-11-13T03:29:40.000Z</published>
    <updated>2017-12-06T08:00:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文主要参考<a href="http://hencoder.com/ui-1-1/" target="_blank" rel="external">hencoder自定义view</a></p>
<p>自定义View主要掌握以下四块内容：</p>
<ol>
<li>View的绘制机制：最主要掌握onMeasure,onLayout,onDraw以及相关类的使用。</li>
<li>事件分发机制：掌握dispathTouchEvent(),onInterceptEvent(),onTouchEvent()三者相关的逻辑。</li>
<li>属性动画,因为属性动画核心是数值的变化，使用属性动画对值View做动画操作。</li>
<li>相关手势类  <a id="more"></a>
</li>
</ol>
</blockquote>
<h3 id="View的绘制机制"><a href="#View的绘制机制" class="headerlink" title="View的绘制机制"></a>View的绘制机制</h3><p><a href="https://plus.google.com/+ArpitMathur/posts/cT1EuBbxEgN" target="_blank" rel="external">自定义View绘制流程图</a><br><img src="https://lh3.googleusercontent.com/-TTZ-LN41ygA/UIQt75DBSEI/AAAAAAAAFAY/v8jAR9WWg5w/w1060-h1872-n-rw/android.png" alt="image">  </p>
<blockquote>
<p>自定义View的绘制就是重写其绘制方法，其中重中之重就是onDraw()。其中最主要就是Paint、Cavans、Matrix等类的使用。  </p>
<h4 id="onDraw-使用"><a href="#onDraw-使用" class="headerlink" title="onDraw()使用"></a>onDraw()使用</h4><p>我们知道生活中的画一幅画，先不说画得好不好，最起码也是需要画笔、颜料、画布才能画出一个你所要的画，当然我们自定义view也不过如此，其中画笔颜料就是我们所说的Paint对象，画布就是onDraw里的Canvas对象。喏，最基本的可能就是这样：  </p>
</blockquote>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个画笔工具</span></div><div class="line">Paint paint = <span class="keyword">new</span> Paint();</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;  </div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">    <span class="comment">// 在画布上绘制一个圆</span></div><div class="line">    canvas.drawCircle(<span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>, paint);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看吧，是不是很简单。但是最后不要漏写了 super.onDraw()。</p>
<h4 id="Canvas-drawXXX-的使用"><a href="#Canvas-drawXXX-的使用" class="headerlink" title="Canvas.drawXXX()的使用"></a>Canvas.drawXXX()的使用</h4><blockquote>
<p>在canvas画布上面你想画什么就画什么好了。也就是调用drawXXX()方法。</p>
<ul>
<li>填充颜色：Canvas.drawColor(@ColorInt int color)</li>
<li>画圆：drawCircle(float centerX, float centerY, float radius, Paint paint)</li>
<li>画矩形：drawRect(float left, float top, float right, float bottom, Paint paint)</li>
<li>画点：drawPoint(float x, float y, Paint paint)</li>
<li>批量画点：drawPoints(float[] pts, int offset, int count, Paint paint) / drawPoints(float[] pts, Paint paint)</li>
<li>画椭圆：drawOval(float left, float top, float right, float bottom, Paint paint)</li>
<li>画线：drawLine(float startX, float startY, float stopX, float stopY, Paint paint)</li>
<li>画弧线或者扇形：drawArc(float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean useCenter, Paint paint)</li>
<li>画自定义图形：drawPath(Path path, Paint paint)</li>
<li>画 Bitmap：drawBitmap(Bitmap bitmap, float left, float top, Paint paint)</li>
<li>画文字：drawText(String text, float x, float y, Paint paint)</li>
</ul>
</blockquote>
<h4 id="Paint类在自定义绘制中充当关键角色：画笔，所以我们自然可以为「画笔」做很多操作，比如设置颜色、绘制模式、粗细等-几个最常用的方法，具体如下："><a href="#Paint类在自定义绘制中充当关键角色：画笔，所以我们自然可以为「画笔」做很多操作，比如设置颜色、绘制模式、粗细等-几个最常用的方法，具体如下：" class="headerlink" title="Paint类在自定义绘制中充当关键角色：画笔，所以我们自然可以为「画笔」做很多操作，比如设置颜色、绘制模式、粗细等.几个最常用的方法，具体如下："></a>Paint类在自定义绘制中充当关键角色：画笔，所以我们自然可以为「画笔」做很多操作，比如设置颜色、绘制模式、粗细等.几个最常用的方法，具体如下：</h4><blockquote>
<ul>
<li>Paint.setStyle(Style style) 设置绘制模式<br>—&gt; setStyle(Style style) 这个方法设置的是绘制的 Style 。Style 具体来说有三种： FILL, STROKE 和 FILL_AND_STROKE 。FILL 是填充模式，STROKE 是画线模式（即描边模式），FILL_AND_STROKE 是两种模式一并使用：既画线又填充。它的默认值是 FILL，填充模式。</li>
<li>Paint.setColor(int color) 设置颜色</li>
<li>Paint.setStrokeWidth(float width) 设置线条宽度</li>
<li>Paint.setTextSize(float textSize) 设置文字大小</li>
<li>Paint.setAntiAlias(boolean aa) 设置抗锯齿开关<br>—&gt; 在绘制的时候，往往需要开启抗锯齿来让图形和文字的边缘更加平滑。开启抗锯齿很简单，只要在  new Paint() 的时候加上一个 ANTI_ALIAS_FLAG 参数就行</li>
</ul>
<p>在画弧线或者扇形中的角度 angle，x 轴正方向为 0°，顺时针方向为正角度，逆时针为负角度。<br>画弧线或者扇形中的 sweepAngle    参数，代表的是绘制的角度，不要被其它方法误导成了以为是绘制结束时候的角度，官方为何在这里做了个变换，其实我也不知道。<br>drawPath() 方法可能相对其它较难，但却是自定义 View 实际应用中最多的。非常需要了解其三类方法<br>drawBitmap() 方法中有个参数是 Bitmap，友情提示：Bitmap 可以通过 BitmapFactory.decodeXXX() 获得。  </p>
</blockquote>
<h5 id="Path-可以描述直线、二次曲线、三次曲线、圆、椭圆、弧形、矩形、圆角矩形。把这些图形结合起来，就可以描述出很多复杂的图形。Path-可以归结为两类方法："><a href="#Path-可以描述直线、二次曲线、三次曲线、圆、椭圆、弧形、矩形、圆角矩形。把这些图形结合起来，就可以描述出很多复杂的图形。Path-可以归结为两类方法：" class="headerlink" title="Path 可以描述直线、二次曲线、三次曲线、圆、椭圆、弧形、矩形、圆角矩形。把这些图形结合起来，就可以描述出很多复杂的图形。Path 可以归结为两类方法："></a>Path 可以描述直线、二次曲线、三次曲线、圆、椭圆、弧形、矩形、圆角矩形。把这些图形结合起来，就可以描述出很多复杂的图形。Path 可以归结为两类方法：</h5><blockquote>
<p>直接描述路径，也可以分为两组：<br>添加子图形：addXXX(), 此类方法在特定情况下几个 Canvas.drawPath() 等同于 Canvas.drawXXX()。<br>画直线或曲线：xxxTo(): 这一组和第一组 addXxx() 方法的区别在于，第一组是添加的完整封闭图形（除了 addPath() ），而这一组添加的只是一条线。<br>辅助设置或计算，因为应用场景很少，凯哥也只讲了其中一个方法： Path.setFillType(Path.FillType ft) 设置填充方式  </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要参考&lt;a href=&quot;http://hencoder.com/ui-1-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hencoder自定义view&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;自定义View主要掌握以下四块内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;View的绘制机制：最主要掌握onMeasure,onLayout,onDraw以及相关类的使用。&lt;/li&gt;
&lt;li&gt;事件分发机制：掌握dispathTouchEvent(),onInterceptEvent(),onTouchEvent()三者相关的逻辑。&lt;/li&gt;
&lt;li&gt;属性动画,因为属性动画核心是数值的变化，使用属性动画对值View做动画操作。&lt;/li&gt;
&lt;li&gt;相关手势类
    
    </summary>
    
      <category term="自定义View" scheme="http://leoncommons.cn/categories/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
    
      <category term="Android自定义View" scheme="http://leoncommons.cn/tags/Android%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>Android  Material Design之ripple水波纹使用</title>
    <link href="http://leoncommons.cn/2017/10/12/Android%20%20Material%20Design%E4%B9%8Bripple%E6%B0%B4%E6%B3%A2%E7%BA%B9%E4%BD%BF%E7%94%A8/"/>
    <id>http://leoncommons.cn/2017/10/12/Android  Material Design之ripple水波纹使用/</id>
    <published>2017-10-12T04:25:45.000Z</published>
    <updated>2017-12-06T08:00:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>我们知道在5.0以上的机型，例如button点击的时候会有一种涟漪的水波纹效果，当让我们通常的做法是通过设置andrid:background来给这个控件加一个selector,但是这样做并没有达到我们想要看到的水波纹效果。而在5.0之后Android引入了Ripple水波纹的效果。</p>
</blockquote>
<h2 id="基本使用（5-0以上）"><a href="#基本使用（5-0以上）" class="headerlink" title="基本使用（5.0以上）"></a>基本使用（5.0以上）</h2><h3 id="button的默认效果"><a href="#button的默认效果" class="headerlink" title="button的默认效果"></a>button的默认效果</h3><p><img src="http://oxp7ffm1s.bkt.clouddn.com/ripple-normal.gif" alt="image"></p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Button</div><div class="line">        android:<span class="attribute">layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        android:<span class="attribute">layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        android:<span class="attribute">text</span>=<span class="string">"button3"</span></div><div class="line">        android:<span class="attribute">textColor</span>=<span class="string">"@color/colorPrimaryDark"</span></div><div class="line">        android:<span class="attribute">textSize</span>=<span class="string">"12sp"</span>/&gt;</div></pre></td></tr></table></figure>
<p>其实这就是一段很普通的代码，虽然有水波纹效果，但是有没有感觉很难看。</p>
<h3 id="使用系统的点击Ripple效果"><a href="#使用系统的点击Ripple效果" class="headerlink" title="使用系统的点击Ripple效果"></a>使用系统的点击Ripple效果</h3><blockquote>
<p>这里我们通过设置android:backgroud来设置ripple的点击效果，主要分为2中效果：</p>
<ul>
<li>有边界的水波纹效果<br>这种效果在21以下的机型点击的时候只有普通selector的点击效果<a id="more"></a>
</li>
</ul>
</blockquote>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:<span class="built_in">background</span>=<span class="string">"?android:attr/selectableItemBackground"</span></div></pre></td></tr></table></figure>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/ripple-selector-background.gif" alt="image"></p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;Button</div><div class="line">            android:<span class="attribute">layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            android:<span class="attribute">layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            android:<span class="attribute">background</span>=<span class="string">"?android:attr/selectableItemBackground"</span></div><div class="line">            android:<span class="attribute">text</span>=<span class="string">"button1"</span></div><div class="line">            android:<span class="attribute">textColor</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">            android:<span class="attribute">textSize</span>=<span class="string">"12sp"</span>/&gt;</div></pre></td></tr></table></figure>
<ul>
<li>超出边界的水波纹效果  <blockquote>
<p>这种超出边界的必须要21以上才可以</p>
</blockquote>
</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:<span class="built_in">background</span>=<span class="string">"?android:attr/selectableItemBackgroundBorderless"</span></div></pre></td></tr></table></figure>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/ripple-selector-background-border.gif" alt="image"></p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;Button</div><div class="line">           android:<span class="attribute">layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">           android:<span class="attribute">layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">           android:<span class="attribute">background</span>=<span class="string">"?android:attr/selectableItemBackgroundBorderless"</span></div><div class="line">           android:<span class="attribute">text</span>=<span class="string">"button2"</span></div><div class="line">           android:<span class="attribute">textColor</span>=<span class="string">"@color/colorAccent"</span></div><div class="line">           android:<span class="attribute">textSize</span>=<span class="string">"12sp"</span>/&gt;</div></pre></td></tr></table></figure>
<ul>
<li>更改系统水波纹效果颜色<blockquote>
<p>有的时候你觉得这种默认的灰色点击的水波纹效果不是你想要的，但是你又不想去设置ripple标签的drawable,那么你只需要在styles-v21主题里面加入</p>
</blockquote>
</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">item</span> <span class="built_in">name</span> = <span class="string">"android:colorControlHighlight"</span>&gt;@color/colorAccent&lt;/<span class="built_in">item</span>&gt;</div></pre></td></tr></table></figure>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/ripple-selector-background-change.gif" alt="image"></p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;Button</div><div class="line">            android:<span class="attribute">layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            android:<span class="attribute">layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            android:<span class="attribute">background</span>=<span class="string">"?android:attr/selectableItemBackground"</span></div><div class="line">            android:<span class="attribute">text</span>=<span class="string">"button1"</span></div><div class="line">            android:<span class="attribute">textColor</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">            android:<span class="attribute">textSize</span>=<span class="string">"12sp"</span>/&gt;</div></pre></td></tr></table></figure>
<h3 id="使用ripple"><a href="#使用ripple" class="headerlink" title="使用ripple"></a>使用ripple</h3><blockquote>
<p>有的时候你想设置如不同的button点击效果不一样，也就是我想要让它点击的时候显示什么样的颜色的水波纹效果就是啥样的样式，这样一来我们就可以设置ripple标签的drawable</p>
<ul>
<li>超出边界的ripple点击效果  </li>
</ul>
</blockquote>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/ripple-nomask.gif" alt="image"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">ripple</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>        </span></div><div class="line"><span class="attr">android:color</span>=<span class="string">"?android:colorPrimaryDark"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">ripple</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>有边界的ripple点击效果<blockquote>
<p>我们知道，除了超出边界的效果，还有一种是有边界限制的。既然要限制边界，我们就需要给他提供一个范围，即添加一个item标签的mask。</p>
</blockquote>
</li>
</ul>
<ol>
<li>使用颜色作为mask   </li>
</ol>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/ripple-color-mask.gif" alt="image"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ripple</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>        </span></div><div class="line"><span class="attr">android:color</span>=<span class="string">"?android:colorPrimaryDark"</span>&gt;    </div><div class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@color/colorAccent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ripple</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>使用shape作为mask </li>
</ol>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/ripple-shape-mask.gif" alt="image"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ripple</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>        </span></div><div class="line"><span class="attr">android:color</span>=<span class="string">"?android:colorPrimaryDark"</span>&gt;   </div><div class="line">   <span class="tag">&lt;<span class="name">item</span> &gt;</span>        </div><div class="line">      <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"oval"</span>&gt;</span>           </div><div class="line">        <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/colorAccent"</span>&gt;</span><span class="tag">&lt;/<span class="name">solid</span>&gt;</span>        </div><div class="line">     <span class="tag">&lt;/<span class="name">shape</span>&gt;</span>   </div><div class="line">   <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ripple</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>使用图片作为mask  </li>
</ol>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/ripple-image-mask.gif" alt="image"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ripple</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>        </span></div><div class="line"><span class="attr">android:color</span>=<span class="string">"?android:colorPrimaryDark"</span>&gt;    </div><div class="line">     <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/ic_launcher"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ripple</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>给item添加android:id=”@android:id/mask”  </li>
</ol>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/ripple-imageborder-mask.gif" alt="image"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ripple</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>        </span></div><div class="line"><span class="attr">android:color</span>=<span class="string">"?android:colorPrimaryDark"</span>&gt;    </div><div class="line">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@android:id/mask"</span>        <span class="attr">android:drawable</span>=<span class="string">"@drawable/ic_launcher"</span>&gt;</span>    </div><div class="line">       <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ripple</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>这里出现了一个有趣的现象，我们可以看到从一开始图片是隐藏的，只有点击的时候才出现图片的轮廓，我们可以总结一下：<br>1、如果不指定id，那么在显示的时候会显示出item指定的drawable。2、如果指定id为@android:id/mask，那么默认是不会显示该drawable，而是在点击的时候出现该drawable的轮廓。<br>注意如果使用ripple的话想兼容21以下的版本，必须将ripple设置在drawable-v21目录下，而在drawable目录下则需要存放一个相同命名的xml文件，这样在21以下机型就不会出现crash。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我们知道在5.0以上的机型，例如button点击的时候会有一种涟漪的水波纹效果，当让我们通常的做法是通过设置andrid:background来给这个控件加一个selector,但是这样做并没有达到我们想要看到的水波纹效果。而在5.0之后Android引入了Ripple水波纹的效果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;基本使用（5-0以上）&quot;&gt;&lt;a href=&quot;#基本使用（5-0以上）&quot; class=&quot;headerlink&quot; title=&quot;基本使用（5.0以上）&quot;&gt;&lt;/a&gt;基本使用（5.0以上）&lt;/h2&gt;&lt;h3 id=&quot;button的默认效果&quot;&gt;&lt;a href=&quot;#button的默认效果&quot; class=&quot;headerlink&quot; title=&quot;button的默认效果&quot;&gt;&lt;/a&gt;button的默认效果&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://oxp7ffm1s.bkt.clouddn.com/ripple-normal.gif&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;Button&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        android:&lt;span class=&quot;attribute&quot;&gt;layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        android:&lt;span class=&quot;attribute&quot;&gt;layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        android:&lt;span class=&quot;attribute&quot;&gt;text&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button3&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        android:&lt;span class=&quot;attribute&quot;&gt;textColor&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@color/colorPrimaryDark&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        android:&lt;span class=&quot;attribute&quot;&gt;textSize&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;12sp&quot;&lt;/span&gt;/&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实这就是一段很普通的代码，虽然有水波纹效果，但是有没有感觉很难看。&lt;/p&gt;
&lt;h3 id=&quot;使用系统的点击Ripple效果&quot;&gt;&lt;a href=&quot;#使用系统的点击Ripple效果&quot; class=&quot;headerlink&quot; title=&quot;使用系统的点击Ripple效果&quot;&gt;&lt;/a&gt;使用系统的点击Ripple效果&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;这里我们通过设置android:backgroud来设置ripple的点击效果，主要分为2中效果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有边界的水波纹效果&lt;br&gt;这种效果在21以下的机型点击的时候只有普通selector的点击效果
    
    </summary>
    
      <category term="Material Design" scheme="http://leoncommons.cn/categories/Material-Design/"/>
    
    
      <category term="ripple水波纹" scheme="http://leoncommons.cn/tags/ripple%E6%B0%B4%E6%B3%A2%E7%BA%B9/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 语法的简单使用</title>
    <link href="http://leoncommons.cn/2017/07/28/Markdown-%E8%AF%AD%E6%B3%95%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://leoncommons.cn/2017/07/28/Markdown-语法的简单使用/</id>
    <published>2017-07-28T10:25:45.000Z</published>
    <updated>2017-12-06T08:02:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown 语法：</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 第一级标题 `&lt;h1&gt;` </div><div class="line">## 第二级标题 `&lt;h2&gt;` </div><div class="line">###### 第六级标题 `&lt;h6&gt;`</div></pre></td></tr></table></figure>
<h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>Markdown 语法：</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*这些文字会生成`&lt;em&gt;`*</div><div class="line">_这些文字会生成`&lt;u&gt;`_</div><div class="line"></div><div class="line">**这些文字会生成`&lt;strong&gt;`**</div><div class="line">__这些文字会生成`&lt;strong&gt;`__</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>效果如下：</p>
<p><em>这些文字会生成<code>&lt;em&gt;</code></em><br><em>这些文字会生成<code>&lt;u&gt;</code></em></p>
<p><strong>这些文字会生成<code>&lt;strong&gt;</code></strong><br><strong>这些文字会生成<code>&lt;strong&gt;</code></strong></p>
<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>四个及以上空格加回车。<br>如果不想打这么多空格，只要回车就为换行，请勾选：<code>Preferences</code> - <code>Themes</code> - <code>Translate newlines to &lt;br&gt; tags</code></p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>Markdown 语法：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>项目一 无序列表 <span class="code">`* + 空格键`</span></div><div class="line"><span class="bullet">* </span>项目二</div><div class="line"><span class="bullet">* </span>项目二的子项目一 无序列表 <span class="code">`TAB + * + 空格键`</span></div><div class="line"><span class="bullet">* </span>项目二的子项目二</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<ul>
<li>项目一 无序列表 <code>* + 空格键</code></li>
<li>项目二</li>
<li>项目二的子项目一 无序列表 <code>TAB + * + 空格键</code></li>
<li>项目二的子项目二</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>Markdown 语法：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1. </span>项目一 有序列表 <span class="code">`数字 + . + 空格键`</span></div><div class="line"><span class="bullet">2. </span>项目二 </div><div class="line"><span class="bullet">3. </span>项目三</div><div class="line"><span class="bullet">1. </span>项目三的子项目一 有序列表 <span class="code">`TAB + 数字 + . + 空格键`</span></div><div class="line"><span class="bullet">2. </span>项目三的子项目二</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<ol>
<li>项目一 有序列表 <code>数字 + . + 空格键</code></li>
<li>项目二 </li>
<li>项目三</li>
<li>项目三的子项目一 有序列表 <code>TAB + 数字 + . + 空格键</code></li>
<li>项目三的子项目二</li>
</ol>
<h3 id="任务列表（Task-lists）"><a href="#任务列表（Task-lists）" class="headerlink" title="任务列表（Task lists）"></a>任务列表（Task lists）</h3><p>Markdown 语法：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> [ ] 任务一 未做任务 <span class="string">`- + 空格 + [ ]`</span></span></div><div class="line">-<span class="ruby"> [x] 任务二 已做任务 <span class="string">`- + 空格 + [x]`</span></span></div></pre></td></tr></table></figure>
<p>效果如下：</p>
<ul>
<li>[ ] 任务一 未做任务 <code>- + 空格 + [ ]</code></li>
<li>[x] 任务二 已做任务 <code>- + 空格 + [x]</code></li>
</ul>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>Markdown 语法：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">![<span class="string">GitHub set up</span>](<span class="link">http://zh.mweb.im/asset/img/set-up-git.gif</span>)</div><div class="line">格式: ![<span class="string">Alt Text</span>](<span class="link">url</span>)</div></pre></td></tr></table></figure>
<p><code>Control + Shift + I</code> 可插入Markdown语法。<br>如果是 MWeb 的文档库中的文档，还可以用拖放图片、<code>CMD + V</code> 粘贴、<code>CMD + Option + I</code> 导入这三种方式来增加图片。<br>效果如下：</p>
<p><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="GitHub set up"></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>Markdown 语法：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">email <span class="xml"><span class="tag">&lt;<span class="name">example@example.com</span>&gt;</span></span></div><div class="line">[<span class="string">GitHub</span>](<span class="link">http://github.com</span>)</div><div class="line">自动生成连接  <span class="xml"><span class="tag">&lt;<span class="name">http:</span>//<span class="attr">www.github.com</span>/&gt;</span></span></div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>Email 连接： <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#111;&#58;&#101;&#120;&#97;&#x6d;&#x70;&#108;&#101;&#x40;&#101;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#x2e;&#99;&#x6f;&#x6d;">&#101;&#120;&#97;&#x6d;&#x70;&#108;&#101;&#x40;&#101;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#x2e;&#99;&#x6f;&#x6d;</a><br><a href="http://github.com" target="_blank" rel="external">连接标题Github网站</a><br>自动生成连接像： <a href="http://www.github.com/" target="_blank" rel="external">http://www.github.com/</a> 这样</p>
<h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><p>Markdown 语法：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">某某说:</div><div class="line"><span class="meta">&gt;</span><span class="bash"> 第一行引用</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> 第二行费用文字</span></div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>某某说:</p>
<blockquote>
<p>第一行引用<br>第二行费用文字</p>
</blockquote>
<h2 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h2><p>Markdown 语法：</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">像这样即可：`&lt;addr&gt;` `<span class="keyword">code</span>`</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>像这样即可：<code>&lt;addr&gt;</code> <code>code</code></p>
<h2 id="多行或者一段代码"><a href="#多行或者一段代码" class="headerlink" title="多行或者一段代码"></a>多行或者一段代码</h2><p>Markdown 语法：</p>
<pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(arg) &#123;</div><div class="line">    $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p><code>CMD + Shift + K</code> 可插入Markdown语法。<br>效果如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(arg) &#123;</div><div class="line">    $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="顺序图或流程图"><a href="#顺序图或流程图" class="headerlink" title="顺序图或流程图"></a>顺序图或流程图</h2><p>Markdown 语法：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</div><div class="line">Note right of 李四: 李四愣了一下，说：</div><div class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</div></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: 开始</div><div class="line">e=&gt;end: 结束</div><div class="line">op=&gt;operation: 我的操作</div><div class="line">cond=&gt;condition: 确认？</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure>
</code></pre><p>效果如下（ <code>Preferences</code> - <code>Themes</code> - <code>Enable sequence &amp; flow chart</code> 才会看到效果 ）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</div><div class="line">Note right of 李四: 李四愣了一下，说：</div><div class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: 开始</div><div class="line">e=&gt;end: 结束</div><div class="line">op=&gt;operation: 我的操作</div><div class="line">cond=&gt;condition: 确认？</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>Markdown 语法：</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">第一格表头 <span class="string">| 第二格表头</span></div><div class="line">--------- <span class="string">| -------------</span></div><div class="line">内容单元格 第一列第一格 <span class="string">| 内容单元格第二列第一格</span></div><div class="line">内容单元格 第一列第二格 多加文字 <span class="string">| 内容单元格第二列第二格</span></div></pre></td></tr></table></figure>
<p>效果如下：</p>
<table>
<thead>
<tr>
<th>第一格表头</th>
<th>第二格表头</th>
</tr>
</thead>
<tbody>
<tr>
<td>内容单元格 第一列第一格</td>
<td>内容单元格第二列第一格</td>
</tr>
<tr>
<td>内容单元格 第一列第二格 多加文字</td>
<td>内容单元格第二列第二格</td>
</tr>
</tbody>
</table>
<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>Markdown 语法：</p>
<p>加删除线像这样用： <del>删除这些</del></p>
<p>效果如下：</p>
<p>加删除线像这样用： <del>删除这些</del></p>
<h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>以下三种方式都可以生成分隔线：</p>
<hr>
<hr>
<hr>
<p>效果如下：</p>
<hr>
<hr>
<hr>
<h2 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a>MathJax</h2><p>Markdown 语法：</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">块级公式：</div><div class="line">$$	x = <span class="symbol">\d</span>frac&#123;-b <span class="symbol">\p</span>m <span class="symbol">\s</span>qrt&#123;b^2 - 4ac&#125;&#125;&#123;2a&#125; $$</div><div class="line"></div><div class="line"><span class="symbol">\\</span>[ <span class="symbol">\f</span>rac&#123;1&#125;&#123;<span class="symbol">\B</span>igl(<span class="symbol">\s</span>qrt&#123;<span class="symbol">\p</span>hi <span class="symbol">\s</span>qrt&#123;5&#125;&#125;-<span class="symbol">\p</span>hi<span class="symbol">\B</span>igr) e^&#123;<span class="symbol">\f</span>rac25 <span class="symbol">\p</span>i&#125;&#125; =</div><div class="line">1+<span class="symbol">\f</span>rac&#123;e^&#123;-2<span class="symbol">\p</span>i&#125;&#125; &#123;1+<span class="symbol">\f</span>rac&#123;e^&#123;-4<span class="symbol">\p</span>i&#125;&#125; &#123;1+<span class="symbol">\f</span>rac&#123;e^&#123;-6<span class="symbol">\p</span>i&#125;&#125;</div><div class="line">&#123;1+<span class="symbol">\f</span>rac&#123;e^&#123;-8<span class="symbol">\p</span>i&#125;&#125; &#123;1+<span class="symbol">\l</span>dots&#125; &#125; &#125; &#125; <span class="symbol">\\</span>]</div><div class="line"></div><div class="line">行内公式： $<span class="symbol">\G</span>amma(n) = (n-1)!<span class="symbol">\q</span>uad<span class="symbol">\f</span>orall n<span class="symbol">\i</span>n<span class="symbol">\m</span>athbb N$</div></pre></td></tr></table></figure>
<p>效果如下（<code>Preferences</code> - <code>Themes</code> - <code>Enable MathJax</code> 才会看到效果）：</p>
<p>块级公式：<br>$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p>
<p>\[ \frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} =<br>1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}}<br>{1+\frac{e^{-8\pi}} {1+\ldots} } } } \]</p>
<p>行内公式： $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</p>
<h2 id="脚注（Footnote）"><a href="#脚注（Footnote）" class="headerlink" title="脚注（Footnote）"></a>脚注（Footnote）</h2><p>Markdown 语法：</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是一个脚注：<span class="string">[^sample_footnote]</span></div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>这是一个脚注：<a href="这里是脚注信息">^sample_footnote</a></p>
<h2 id="注释和阅读更多"><a href="#注释和阅读更多" class="headerlink" title="注释和阅读更多"></a>注释和阅读更多</h2><!-- comment -->
<!-- more -->
<p>Actions-&gt;Insert Read More Comment <em>或者</em> <code>Command + .</code><br><strong>注</strong> 阅读更多的功能只用在生成网站或博客时，插入时注意要后空一行。</p>
<h2 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h2><p>Markdown 语法：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[TOC]</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>[TOC]</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h2&gt;&lt;p&gt;Markdown 语法：&lt;/p&gt;
&lt;figure class=&quot;highlight clean&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# 第一级标题 `&amp;lt;h1&amp;gt;` &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;## 第二级标题 `&amp;lt;h2&amp;gt;` &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;###### 第六级标题 `&amp;lt;h6&amp;gt;`&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;强调&quot;&gt;&lt;a href=&quot;#强调&quot; class=&quot;headerlink&quot; title=&quot;强调&quot;&gt;&lt;/a&gt;强调&lt;/h2&gt;&lt;p&gt;Markdown 语法：&lt;/p&gt;
&lt;figure class=&quot;highlight autohotkey&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;*这些文字会生成`&amp;lt;em&amp;gt;`*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;_这些文字会生成`&amp;lt;u&amp;gt;`_&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;**这些文字会生成`&amp;lt;strong&amp;gt;`**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;__这些文字会生成`&amp;lt;strong&amp;gt;`__&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Markdown" scheme="http://leoncommons.cn/categories/Markdown/"/>
    
    
      <category term="Markdown使用" scheme="http://leoncommons.cn/tags/Markdown%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://leoncommons.cn/2017/07/04/hello-world/"/>
    <id>http://leoncommons.cn/2017/07/04/hello-world/</id>
    <published>2017-07-04T10:06:39.000Z</published>
    <updated>2017-12-06T08:01:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>看见LEON</title>
  <subtitle>待我代码编成，娶你可好！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://leoncommons.cn/"/>
  <updated>2017-12-01T08:07:03.482Z</updated>
  <id>http://leoncommons.cn/</id>
  
  <author>
    <name>Leon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Calabash-Android使用教程（一）</title>
    <link href="http://leoncommons.cn/2017/12/01/Calabash-Android%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B(%E4%B8%80%EF%BC%89/"/>
    <id>http://leoncommons.cn/2017/12/01/Calabash-Android使用教程(一）/</id>
    <published>2017-12-01T08:04:45.000Z</published>
    <updated>2017-12-01T08:07:03.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Calabash-Android环境搭建"><a href="#Calabash-Android环境搭建" class="headerlink" title="Calabash-Android环境搭建"></a>Calabash-Android环境搭建</h2><blockquote>
<p>本文系统环境基于Mac OX</p>
</blockquote>
<h3 id="安装ruby"><a href="#安装ruby" class="headerlink" title="安装ruby"></a>安装ruby</h3><blockquote>
<p>正常mac系统下已经安装过ruby了，如果没有安装请安装ruby，calabash支持需要ruby&gt;=2.0。       </p>
</blockquote>
<p>安装ruby</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>ruby</div></pre></td></tr></table></figure>
<h3 id="安装Android-SDK-并配置环境"><a href="#安装Android-SDK-并配置环境" class="headerlink" title="安装Android SDK 并配置环境"></a>安装Android SDK 并配置环境</h3><blockquote>
<p>下载<a href="http://developer.android.com/sdk/index.html" target="_blank" rel="external">Android Stuidio</a>，请自行准备梯子<br>Android Studio需要Java Development Kit [JDK] 1.8。你可以在命令行中输入 javac -version来查看你当前安装的JDK版本，未安装的话可以到<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">官网</a>上下载。<br>Android Stuidio安装完成后，在Android Studio的启动欢迎界面中选择Configure | SDK Manager。</p>
</blockquote>
<p><img src="http://reactnative.cn/static/docs/0.50/img/react-native-android-studio-configure-sdk.png" alt="image">   </p>
<ul>
<li>在SDK Platforms窗口中，选择Show Package Details，然后在Android 6.0 (Marshmallow)中勾选Google APIs、Android SDK Platform 23、Intel x86 Atom System Image、Intel x86 Atom_64 System Image以及Google APIs Intel x86 Atom_64 System Image。然后在Android SDK Build Tools中勾选Android SDK Build-Tools 具体的可以根据自己需求自行配置</li>
</ul>
<p><img src="http://reactnative.cn/static/docs/0.50/img/react-native-android-studio-android-sdk-platforms.png" alt="image"></p>
<p><img src="http://reactnative.cn/static/docs/0.50/img/react-native-android-studio-android-sdk-build-tools.png" alt="image"></p>
<ul>
<li>配置 ANDROID_HOME环境变量<blockquote>
<p>确保ANDROID_HOME环境变量正确地指向了你安装的Android SDK的路径。具体的做法是把下面的命令加入到~/.bash_profile文件中：(译注：~表示用户目录，即/Users/你的用户名/，而小数点开头的文件在Finder中是隐藏的，并且这个文件有可能并不存在。请在终端下使用vi ~/.bash_profile命令创建或编辑）。如果你的命令行不是bash，而是例如zsh等其他，请使用对应的配置文件。</p>
</blockquote>
</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 如果你不是通过Android Studio安装的sdk，则其路径可能不同，请自行确定清楚。</span></div><div class="line"><span class="builtin-name">export</span> <span class="attribute">ANDROID_HOME</span>=~/Library/Android/sdk</div><div class="line"></div><div class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools</div></pre></td></tr></table></figure>
<blockquote>
<p>然后使用下列命令使其立即生效（否则重启后才生效）：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ~/.bash_profile</div><div class="line">// 可以使用<span class="built_in">echo</span> <span class="variable">$ANDROID_HOME</span>检查此变量是否已正确设置。</div></pre></td></tr></table></figure>
<h3 id="安装calabash-android"><a href="#安装calabash-android" class="headerlink" title="安装calabash-android"></a>安装calabash-android</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo gem <span class="keyword">install </span>calabash-<span class="keyword">android</span></div><div class="line"><span class="comment"># 如果出现安装不了，你的梯子准备好了吗</span></div></pre></td></tr></table></figure>
<h3 id="初始化项目测试项目"><a href="#初始化项目测试项目" class="headerlink" title="初始化项目测试项目"></a>初始化项目测试项目</h3><blockquote>
<p>接下来我们来创建一个calabash项目</p>
</blockquote>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在终端上执行</span></div><div class="line">calabash-<span class="keyword">android </span>gen</div></pre></td></tr></table></figure>
<p>这样项目就创建完成了</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">JundeMacBook-Pro:testdemo2 xxx: calabash-android gen</div><div class="line"></div><div class="line">----------Question----------</div><div class="line">I'm about to create a subdirectory called features.</div><div class="line">features will contain all your calabash tests.</div><div class="line"><span class="section">Please hit return to confirm that's what you want.</span></div><div class="line">---------------------------</div><div class="line"></div><div class="line"></div><div class="line">----------Info----------</div><div class="line"><span class="section">features subdirectory created.</span></div><div class="line">---------------------------</div><div class="line">JundeMacBook-Pro:testdemo2 junwang$</div></pre></td></tr></table></figure>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/calabash-demo.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Calabash-Android环境搭建&quot;&gt;&lt;a href=&quot;#Calabash-Android环境搭建&quot; class=&quot;headerlink&quot; title=&quot;Calabash-Android环境搭建&quot;&gt;&lt;/a&gt;Calabash-Android环境搭建&lt;/h2&gt;&lt;
    
    </summary>
    
      <category term="自动化测试" scheme="http://leoncommons.cn/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Calabash" scheme="http://leoncommons.cn/tags/Calabash/"/>
    
  </entry>
  
  <entry>
    <title>JAVA8使用笔记（二）</title>
    <link href="http://leoncommons.cn/2017/11/27/Java8%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0(%E4%BA%8C%EF%BC%89/"/>
    <id>http://leoncommons.cn/2017/11/27/Java8使用笔记(二）/</id>
    <published>2017-11-27T02:20:20.000Z</published>
    <updated>2017-11-27T07:32:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><ul>
<li>reduce<blockquote>
<p>1 、元素求和操作</p>
</blockquote>
</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 普通的for-each求和方式</span></div><div class="line"><span class="keyword">public</span> <span class="literal">void</span> sumReduce()&#123;</div><div class="line">        <span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; testList = Arrays.asList(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</div><div class="line">        int <span class="keyword">sum</span> = <span class="number">0</span>;</div><div class="line">        for (<span class="built_in">Integer</span> <span class="built_in">integer</span> : testList) &#123;</div><div class="line">            <span class="keyword">sum</span> += <span class="built_in">integer</span>;</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="keyword">sum</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// reduce 进行求和操作</span></div><div class="line"><span class="type">int</span> tempSum = testList.<span class="keyword">stream</span>()</div><div class="line">                .reduce(<span class="number">0</span>, (a, b) -&gt; a + b);</div><div class="line">System.<span class="keyword">out</span>.println(tempSum);</div><div class="line"><span class="comment">// 输出19</span></div></pre></td></tr></table></figure>
<blockquote>
<p>reduce接受两个参数：<br>1.一个初始值，这里给的是0，<br>2.一个BinaryOperator<t> 来将两个进行组合产生新的值。这里我们用的是（a,b）-&gt; a+b进行求和</t></p>
<p>reduce还有一个重载的方法，他不接受初始值，但会返回一个Optional对象</p>
</blockquote>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Optional&lt;Integer&gt; optional = testList.stream()</div><div class="line">                .reduce<span class="function"><span class="params">((a, b) -&gt; a * b)</span>;</span></div><div class="line"><span class="title">optional</span>.<span class="title">ifPresent</span><span class="params">(p -&gt; &#123;</span></div><div class="line">            System.out.println(p);</div><div class="line">        &#125;);</div><div class="line">// 输出 360</div></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>最大值和最小值<br>如果我们希望能够在给定的集合中求出最大值的话。我们可以这样写，reduce操作会针对流中的元素进行比对，并产生一个新的最大值，指导整个流消耗完。如果要计算最小值得话需要Integer:min来替换Integer:max就好了</li>
</ol>
</blockquote>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//max</span></div><div class="line"><span class="selector-tag">testList</span><span class="selector-class">.stream</span>()</div><div class="line">                <span class="selector-class">.reduce</span>(<span class="attribute">Integer</span>::max)</div><div class="line">                <span class="selector-class">.ifPresent</span>(m -&gt; System.out.println(m));</div><div class="line"><span class="comment">// 输出 6</span></div></pre></td></tr></table></figure>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">testList</span><span class="selector-class">.stream</span>()</div><div class="line">                <span class="selector-class">.reduce</span>(<span class="attribute">Integer</span>::min)</div><div class="line">                <span class="selector-class">.ifPresent</span>(m -&gt; System.out.println(m));</div><div class="line"><span class="comment">// 输出1</span></div></pre></td></tr></table></figure>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 当然我们可以使用三位运算</span></div><div class="line">        <span class="selector-tag">testList</span><span class="selector-class">.stream</span>()</div><div class="line">                <span class="selector-class">.reduce</span>((x,y)-&gt; x&lt; y? <span class="attribute">x</span>:y)</div><div class="line">                <span class="selector-class">.ifPresent</span>(y-&gt; System.out.println(y));</div><div class="line"><span class="comment">// 输出1</span></div></pre></td></tr></table></figure>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用Integer::compareTo比较操作</span></div><div class="line"><span class="selector-tag">testList</span><span class="selector-class">.stream</span>()</div><div class="line">                <span class="selector-class">.reduce</span>(<span class="attribute">Integer</span>::compareTo)</div><div class="line">                <span class="selector-class">.ifPresent</span>(x-&gt; System.out.println(x));</div><div class="line"><span class="comment">// 输出-1</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注： stream并不适合做并行操作，如果需要并行求和时候，可以将stream()换成parallelStream()  </p>
<p>3.数值流操作</p>
</blockquote>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 求和操作</span></div><div class="line"> <span class="keyword">Integer</span> sum1 = testList.stream()</div><div class="line">                .map(d -&gt; d * <span class="number">10</span>)</div><div class="line">                .reduce(<span class="number">0</span>, <span class="keyword">Integer</span>::<span class="keyword">sum</span>);</div><div class="line"> <span class="keyword">System</span>.out.println(sum1);</div><div class="line"> <span class="comment">//输出190</span></div></pre></td></tr></table></figure>
<blockquote>
<p>上面的代码我们知道了reduce的求和操作，但是我们发现reduce对元素类型进行了装箱再进行求和操作。如果我们想进行原始类型流的转换我们可以试一试下面的方法。</p>
</blockquote>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//求和</span></div><div class="line"><span class="type">int</span> sum2 = testList.<span class="keyword">stream</span>()</div><div class="line">                .mapToInt(d -&gt; d * <span class="number">10</span>)</div><div class="line">                .sum();</div><div class="line">System.<span class="keyword">out</span>.println(sum2);</div><div class="line"><span class="comment">//输出190</span></div></pre></td></tr></table></figure>
<blockquote>
<p>这段代码我们知道我们可以通过mapToInt对原始类型的流进行求和操作。当然不仅有mapToInt，还有mapToDouble、mapToLong。</p>
</blockquote>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">IntStream intStream = testList.<span class="keyword">stream</span>()</div><div class="line">IntStream intStream = testList.<span class="keyword">stream</span>()</div><div class="line">               .mapToInt(d -&gt; d * <span class="number">10</span>);</div><div class="line">OptionalInt <span class="built_in">max</span> = intStream.<span class="built_in">max</span>();</div><div class="line"><span class="type">int</span> asInt = <span class="built_in">max</span>.getAsInt();</div><div class="line">System.<span class="keyword">out</span>.println(asInt);</div><div class="line"><span class="comment">//输出60</span></div></pre></td></tr></table></figure>
<blockquote>
<p>mapToInt等对流的操作返回的是一个IntStream流，如果你要进行最大操作，可以使用max()，他返回的是一个OptionalInt，他属于Optional类特别的版本：OptionalInt、OptionalLong、OptionalDouble</p>
</blockquote>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">int</span> <span class="built_in">max1</span> = testList.stream()</div><div class="line">                .mapToInt(d -&gt; d * <span class="number">10</span>)</div><div class="line">                .<span class="built_in">max</span>()</div><div class="line">                .orElse(<span class="number">100</span>);</div><div class="line">System.<span class="keyword">out</span>.println(<span class="built_in">max1</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>如上，如果你不知道有没有最大值的话 ，你想给他定义一个默认最大值的话，可以利用orElse对其进行操作</p>
</blockquote>
<h3 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h3><blockquote>
<p>Java8引入了可以用于IntStream和LongStream可以帮助生成数值的范围range和rangeClose。这两个方法第一个参数接受起始值，第二个参数接受结束值。但是range是不包含结束值，而rangeClosed则包含结束值。  </p>
</blockquote>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span> <span class="keyword">count</span> = IntStream.range(<span class="number">1</span>, <span class="number">10</span>)</div><div class="line">               .<span class="keyword">count</span>();</div><div class="line">System.out.<span class="keyword">println</span>(<span class="keyword">count</span>);</div><div class="line"><span class="comment">//输出9</span></div><div class="line"></div><div class="line"><span class="keyword">long</span> count1 = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">10</span>)</div><div class="line">               .<span class="keyword">count</span>();</div><div class="line">System.out.<span class="keyword">println</span>(count1);</div><div class="line"><span class="comment">//输出10</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;操作符&quot;&gt;&lt;a href=&quot;#操作符&quot; class=&quot;headerlink&quot; title=&quot;操作符&quot;&gt;&lt;/a&gt;操作符&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;reduce&lt;blockquote&gt;
&lt;p&gt;1 、元素求和操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul
    
    </summary>
    
      <category term="JAVA8" scheme="http://leoncommons.cn/categories/JAVA8/"/>
    
    
      <category term="JAVA8使用笔记" scheme="http://leoncommons.cn/tags/JAVA8%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JAVA8使用笔记（一）</title>
    <link href="http://leoncommons.cn/2017/11/24/Java8%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0(%E4%B8%80)/"/>
    <id>http://leoncommons.cn/2017/11/24/Java8使用笔记(一)/</id>
    <published>2017-11-24T10:12:40.000Z</published>
    <updated>2017-11-27T07:32:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>java8 — Stream流操作</p>
<h3 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h3></blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// model</span></div><div class="line"><span class="keyword">package</span> com.wangj.java8demo;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dish</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> vegetarian;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Type type;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dish</span><span class="params">(String name, <span class="keyword">boolean</span> vegetarian, <span class="keyword">int</span> calories, Type type)</span> </span>&#123; <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.vegetarian = vegetarian;</div><div class="line">        <span class="keyword">this</span>.calories = calories;</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isVegetarian</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> vegetarian;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCalories</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> calories;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> type;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Type &#123; MEAT, FISH, OTHER &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 演示demo</span></div><div class="line"><span class="keyword">package</span> com.wangj.java8demo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.stream.Stream;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toList;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOne</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doIt</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;Dish&gt; menu = Arrays.asList(</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"pork"</span>, <span class="keyword">false</span>, <span class="number">800</span>, Dish.Type.MEAT),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"beef"</span>, <span class="keyword">false</span>, <span class="number">700</span>, Dish.Type.MEAT),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"chicken"</span>, <span class="keyword">false</span>, <span class="number">400</span>, Dish.Type.MEAT),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"french fries"</span>, <span class="keyword">true</span>, <span class="number">530</span>, Dish.Type.OTHER),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"rice"</span>, <span class="keyword">true</span>, <span class="number">350</span>, Dish.Type.OTHER),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"season fruit"</span>, <span class="keyword">true</span>, <span class="number">120</span>, Dish.Type.OTHER),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"pizza"</span>, <span class="keyword">true</span>, <span class="number">550</span>, Dish.Type.OTHER),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"prawns"</span>, <span class="keyword">false</span>, <span class="number">300</span>, Dish.Type.FISH),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"salmon"</span>, <span class="keyword">false</span>, <span class="number">450</span>, Dish.Type.FISH));</div><div class="line"></div><div class="line">        List&lt;String&gt; collect = menu.stream()<span class="comment">//从menu获得stream流</span></div><div class="line">                .filter(Dish::isVegetarian) <span class="comment">//筛选出isVegetarian == true的对象</span></div><div class="line">                .map(Dish::getName)<span class="comment">//转换并获取name</span></div><div class="line">                .limit(<span class="number">3</span>)<span class="comment">//只获取前三个</span></div><div class="line">                .collect(toList());<span class="comment">//将结果存在另一个List中</span></div><div class="line">        System.out.println(collect);</div><div class="line">        <span class="comment">//流只能消费一次，要想获取只能获得新的stream重新来一次</span></div><div class="line">        Stream&lt;Dish&gt; menuStream = menu.stream();</div><div class="line">        menuStream.forEach(dish -&gt; System.out.println(dish.getName()));<span class="comment">//采用forEach迭代操作</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        TestOne testOne = <span class="keyword">new</span> TestOne();</div><div class="line">        testOne.doIt();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// system out</span></div><div class="line"></div><div class="line">[french fries, rice, season fruit]</div><div class="line">pork</div><div class="line">beef</div><div class="line">chicken</div><div class="line">french fries</div><div class="line">rice</div><div class="line">season fruit</div><div class="line">pizza</div><div class="line">prawns</div><div class="line">salmon</div></pre></td></tr></table></figure>
<h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><ol>
<li>for-each 迭代</li>
</ol>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; names = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (Dish dish : menu) &#123;</div><div class="line">            names.add(dish.getName());</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<ol>
<li>Iterator迭代</li>
</ol>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">List</span>&lt;<span class="keyword">String&gt; </span>names = new ArrayList&lt;&gt;()<span class="comment">;</span></div><div class="line">       <span class="keyword">Iterator&lt;Dish&gt; </span><span class="keyword">iterator </span>= menu.<span class="keyword">iterator();</span></div><div class="line">       <span class="meta">while</span> (<span class="keyword">iterator.hasNext()) </span>&#123;</div><div class="line">           Dish dish = <span class="keyword">iterator.next();</span></div><div class="line">           names.<span class="keyword">add(dish.getName());</span></div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<ol>
<li>流</li>
</ol>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; names = menu.stream()</div><div class="line">                .<span class="built_in">map</span>(Dish<span class="type">::getName</span>)</div><div class="line">                .collect(toList());</div></pre></td></tr></table></figure>
<h3 id="使用流"><a href="#使用流" class="headerlink" title="使用流"></a>使用流</h3><blockquote>
<p>总而言之，流的使用一般包括：</p>
<ul>
<li>[x] 一个数据源(如集合)来执行一个查询操作，如List<t>.stream();</t></li>
<li>[x] 一个中间操作链，形成一个水管从上游到下游的一系列操作，如filter、map、limit等。</li>
<li>[x] 一个终端操作，执行流水线操作，产生想要的结果,如 forEach、count 、collect等</li>
</ul>
</blockquote>
<h4 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h4><ul>
<li>filter<blockquote>
<p>顾名思义，就是做过滤筛选处理的。他会接受一个返回boolean的函数作为参数</p>
</blockquote>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">menu</span><span class="selector-class">.stream</span>()</div><div class="line">               <span class="selector-class">.filter</span>(dish -&gt; dish.getCalories()&gt;<span class="number">300</span>)<span class="comment">//过滤calories&gt;300的操作</span></div><div class="line">               <span class="selector-class">.collect</span>(toList());</div></pre></td></tr></table></figure>
<ul>
<li><p>distinct</p>
<blockquote>
<p>distinct根据元素对象的hashCode和equals方法实现去重操作</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">List</span>&lt;Integer&gt; <span class="keyword">numList</span> = Arrays.asList(1, 2, 3, 4, 5, 3, 2, 4);</div><div class="line">        <span class="keyword">numList</span>.stream()</div><div class="line">                .filter(integer -&gt; integer % 2 == 0) <span class="comment">// 2 4 2 4</span></div><div class="line">                .<span class="keyword">distinct</span>()  <span class="comment">// 2 4</span></div><div class="line">                .<span class="keyword">forEach</span>(System.<span class="keyword">out</span>::println);</div><div class="line"><span class="comment">// 输出 2 4</span></div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>limit</p>
<blockquote>
<p>流支持limit(n)限定操作，如果流失有序的，那么该操作最多会返回前n个元素。</p>
</blockquote>
</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> List&lt;String&gt; <span class="keyword">collect</span> = menu.stream()</div><div class="line">                .filter(Dish::isVegetarian)</div><div class="line">                .map(Dish::getName)</div><div class="line">                .limit(<span class="number">3</span>)</div><div class="line">                .<span class="keyword">collect</span>(<span class="keyword">toList</span>());</div><div class="line">        System.out.<span class="keyword">println</span>(<span class="keyword">collect</span>);</div><div class="line">        </div><div class="line"><span class="comment">//输出 [fries, rice, fruit]</span></div></pre></td></tr></table></figure>
<ul>
<li>skip<blockquote>
<p>流支持skip(n)操作,返回一个将前n个元素直接跳过的流，如果流中的元素不足n个，则返回一个空流，值得注意的的是skip和limit是互补的。</p>
</blockquote>
</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; collect = menu.stream()</div><div class="line">                .filter(Dish<span class="type">::isVegetarian</span>)</div><div class="line">                .<span class="built_in">map</span>(Dish<span class="type">::getName</span>)</div><div class="line">                .limit(<span class="number">3</span>)</div><div class="line">                .<span class="keyword">skip</span>(<span class="number">2</span>)</div><div class="line">                .collect(toList());</div><div class="line">        System.out.println(collect);</div><div class="line"><span class="comment">//输出 [fruit]</span></div></pre></td></tr></table></figure>
<ul>
<li>map<blockquote>
<p>map操作符接受的是一个函数对象作为参数，他会将流发射的每一个信号元素进行转换成一个新的信号。</p>
</blockquote>
</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; <span class="keyword">collect</span> = menu.stream()</div><div class="line">                .map(Dish::getName)</div><div class="line">                .<span class="keyword">collect</span>(<span class="keyword">toList</span>());</div><div class="line">        System.out.<span class="keyword">println</span>(<span class="keyword">collect</span>);</div><div class="line"><span class="comment">// 输出 [pork, beef, chicken, fries, rice, fruit, pizza, prawns, salmon]</span></div></pre></td></tr></table></figure>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; collect = menu.stream()</div><div class="line">                .<span class="built_in">map</span>(Dish<span class="type">::getName</span>)</div><div class="line">                .<span class="built_in">map</span>(<span class="built_in">String</span><span class="type">::length</span>)</div><div class="line">                .collect(toList());</div><div class="line">        System.out.println(collect);</div><div class="line"><span class="comment">//输出[4, 4, 7, 5, 4, 5, 5, 6, 6]</span></div><div class="line"><span class="comment">//流的链式处理接收的为上一个流操作的处理结果</span></div></pre></td></tr></table></figure>
<ul>
<li>flatMap <blockquote>
<p>map 生成的是个 1:1 映射，每个输入元素，都按照规则转换成为另外一个元素。还有一些场景，是一对多映射关系的，这时需要 flatMap。flatMap操作符让你吧流中的每个值都换成另一个流，然后把所有的流连起来成为一个流</p>
</blockquote>
</li>
</ul>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Stream&lt;List&lt;Integer&gt;&gt; inputStream = Stream.<span class="keyword">of</span>(</div><div class="line">                Arrays.asList(<span class="number">1</span>),</div><div class="line">                Arrays.asList(<span class="number">2</span>, <span class="number">3</span>),</div><div class="line">                Arrays.asList(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</div><div class="line">        );</div><div class="line">        List&lt;Integer&gt; integerList = inputStream</div><div class="line">                .flatMap<span class="function"><span class="params">((childList) -&gt; childList.stream())</span></span></div><div class="line">                .<span class="title">collect</span><span class="params">(toList())</span>;</div><div class="line">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(integerList)</span>;</div><div class="line">//输出[1, 2, 3, 4, 5, 6]</div></pre></td></tr></table></figure>
<ul>
<li>anyMatch—至少一个满足条件<blockquote>
<p>检查流中是否有一个元素能够匹配anyMatch中的给定元素,该操作返回一个boolean。只要返回的结果有一个达到满足的条件则认定该满足条件。他是一个最终结果操作不是中间操作,</p>
</blockquote>
</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">boolean </span><span class="keyword">b </span>= menu.<span class="keyword">stream()</span></div><div class="line">                .anyMatch(Dish::isVegetarian)<span class="comment">;</span></div><div class="line">        System.out.println(<span class="keyword">b);</span></div><div class="line">// 输出 true</div></pre></td></tr></table></figure>
<ul>
<li><p>allMatch –所有满足条件</p>
<blockquote>
<p>allMatch跟anyMatch类似，他会判定流中的元素是否都能满足allMatch给定的参数</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">boolean </span><span class="keyword">b </span>= menu.<span class="keyword">stream()</span></div><div class="line">                .allMatch(Dish::isVegetarian)<span class="comment">;</span></div><div class="line">        System.out.println(<span class="keyword">b);</span></div><div class="line">// 输出 false</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>noneMatch —所有不满足条件</p>
<blockquote>
<p>noneMatch和allMatch对立，他会判定流中的元素是否都不能满足noneMatch给定的参数</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">boolean </span><span class="keyword">b </span>= menu.<span class="keyword">stream()</span></div><div class="line">                .noneMatch(Dish::isVegetarian)<span class="comment">;</span></div><div class="line">        System.out.println(<span class="keyword">b);</span></div><div class="line">// 输出 false</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>findAny</p>
<blockquote>
<p>他返回一个Optional类，待研究。。。</p>
</blockquote>
</li>
<li>findFirst<blockquote>
<p>有些流我们需要找到操作的第一个元素，findFirst是一个不错的方法。</p>
</blockquote>
</li>
</ul>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">menu.stream()</div><div class="line">                .<span class="function"><span class="title">map</span>(dish1 -&gt;</span> dish.getCalories())</div><div class="line">                .<span class="function"><span class="title">filter</span>(f -&gt;</span> f &gt; <span class="number">300</span>)</div><div class="line">                .findFirst()</div><div class="line">                .<span class="function"><span class="title">ifPresent</span>(d-&gt;</span> &#123;</div><div class="line">                    System.out.println(d);</div><div class="line">                &#125;);</div><div class="line"><span class="comment">//输出 530</span></div></pre></td></tr></table></figure>
<h3 id="下班啦！！！"><a href="#下班啦！！！" class="headerlink" title="下班啦！！！"></a>下班啦！！！</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;java8 — Stream流操作&lt;/p&gt;
&lt;h3 id=&quot;演示代码&quot;&gt;&lt;a href=&quot;#演示代码&quot; class=&quot;headerlink&quot; title=&quot;演示代码&quot;&gt;&lt;/a&gt;演示代码&lt;/h3&gt;&lt;/blockquote&gt;
&lt;figure class
    
    </summary>
    
      <category term="JAVA8" scheme="http://leoncommons.cn/categories/JAVA8/"/>
    
    
      <category term="JAVA8使用笔记" scheme="http://leoncommons.cn/tags/JAVA8%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Android自定义View(一)</title>
    <link href="http://leoncommons.cn/2017/11/13/Android%E8%87%AA%E5%AE%9A%E4%B9%89View(%E4%B8%80)/"/>
    <id>http://leoncommons.cn/2017/11/13/Android自定义View(一)/</id>
    <published>2017-11-13T03:29:40.000Z</published>
    <updated>2017-11-27T07:33:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文主要参考<a href="http://hencoder.com/ui-1-1/" target="_blank" rel="external">hencoder自定义view</a></p>
<p>自定义View主要掌握以下四块内容：</p>
<ol>
<li>View的绘制机制：最主要掌握onMeasure,onLayout,onDraw以及相关类的使用。</li>
<li>事件分发机制：掌握dispathTouchEvent(),onInterceptEvent(),onTouchEvent()三者相关的逻辑。</li>
<li>属性动画,因为属性动画核心是数值的变化，使用属性动画对值View做动画操作。</li>
<li>相关手势类  </li>
</ol>
</blockquote>
<h3 id="View的绘制机制"><a href="#View的绘制机制" class="headerlink" title="View的绘制机制"></a>View的绘制机制</h3><p><a href="https://plus.google.com/+ArpitMathur/posts/cT1EuBbxEgN" target="_blank" rel="external">自定义View绘制流程图</a><br><img src="https://lh3.googleusercontent.com/-TTZ-LN41ygA/UIQt75DBSEI/AAAAAAAAFAY/v8jAR9WWg5w/w1060-h1872-n-rw/android.png" alt="image">  </p>
<blockquote>
<p>自定义View的绘制就是重写其绘制方法，其中重中之重就是onDraw()。其中最主要就是Paint、Cavans、Matrix等类的使用。  </p>
<h4 id="onDraw-使用"><a href="#onDraw-使用" class="headerlink" title="onDraw()使用"></a>onDraw()使用</h4><p>我们知道生活中的画一幅画，先不说画得好不好，最起码也是需要画笔、颜料、画布才能画出一个你所要的画，当然我们自定义view也不过如此，其中画笔颜料就是我们所说的Paint对象，画布就是onDraw里的Canvas对象。喏，最基本的可能就是这样：  </p>
</blockquote>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个画笔工具</span></div><div class="line">Paint paint = <span class="keyword">new</span> Paint();</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;  </div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">    <span class="comment">// 在画布上绘制一个圆</span></div><div class="line">    canvas.drawCircle(<span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>, paint);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看吧，是不是很简单。但是最后不要漏写了 super.onDraw()。</p>
<h4 id="Canvas-drawXXX-的使用"><a href="#Canvas-drawXXX-的使用" class="headerlink" title="Canvas.drawXXX()的使用"></a>Canvas.drawXXX()的使用</h4><blockquote>
<p>在canvas画布上面你想画什么就画什么好了。也就是调用drawXXX()方法。</p>
<ul>
<li>填充颜色：Canvas.drawColor(@ColorInt int color)</li>
<li>画圆：drawCircle(float centerX, float centerY, float radius, Paint paint)</li>
<li>画矩形：drawRect(float left, float top, float right, float bottom, Paint paint)</li>
<li>画点：drawPoint(float x, float y, Paint paint)</li>
<li>批量画点：drawPoints(float[] pts, int offset, int count, Paint paint) / drawPoints(float[] pts, Paint paint)</li>
<li>画椭圆：drawOval(float left, float top, float right, float bottom, Paint paint)</li>
<li>画线：drawLine(float startX, float startY, float stopX, float stopY, Paint paint)</li>
<li>画弧线或者扇形：drawArc(float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean useCenter, Paint paint)</li>
<li>画自定义图形：drawPath(Path path, Paint paint)</li>
<li>画 Bitmap：drawBitmap(Bitmap bitmap, float left, float top, Paint paint)</li>
<li>画文字：drawText(String text, float x, float y, Paint paint)</li>
</ul>
</blockquote>
<h4 id="Paint类在自定义绘制中充当关键角色：画笔，所以我们自然可以为「画笔」做很多操作，比如设置颜色、绘制模式、粗细等-几个最常用的方法，具体如下："><a href="#Paint类在自定义绘制中充当关键角色：画笔，所以我们自然可以为「画笔」做很多操作，比如设置颜色、绘制模式、粗细等-几个最常用的方法，具体如下：" class="headerlink" title="Paint类在自定义绘制中充当关键角色：画笔，所以我们自然可以为「画笔」做很多操作，比如设置颜色、绘制模式、粗细等.几个最常用的方法，具体如下："></a>Paint类在自定义绘制中充当关键角色：画笔，所以我们自然可以为「画笔」做很多操作，比如设置颜色、绘制模式、粗细等.几个最常用的方法，具体如下：</h4><blockquote>
<ul>
<li>Paint.setStyle(Style style) 设置绘制模式<br>—&gt; setStyle(Style style) 这个方法设置的是绘制的 Style 。Style 具体来说有三种： FILL, STROKE 和 FILL_AND_STROKE 。FILL 是填充模式，STROKE 是画线模式（即描边模式），FILL_AND_STROKE 是两种模式一并使用：既画线又填充。它的默认值是 FILL，填充模式。</li>
<li>Paint.setColor(int color) 设置颜色</li>
<li>Paint.setStrokeWidth(float width) 设置线条宽度</li>
<li>Paint.setTextSize(float textSize) 设置文字大小</li>
<li>Paint.setAntiAlias(boolean aa) 设置抗锯齿开关<br>—&gt; 在绘制的时候，往往需要开启抗锯齿来让图形和文字的边缘更加平滑。开启抗锯齿很简单，只要在  new Paint() 的时候加上一个 ANTI_ALIAS_FLAG 参数就行</li>
</ul>
<p>在画弧线或者扇形中的角度 angle，x 轴正方向为 0°，顺时针方向为正角度，逆时针为负角度。<br>画弧线或者扇形中的 sweepAngle    参数，代表的是绘制的角度，不要被其它方法误导成了以为是绘制结束时候的角度，官方为何在这里做了个变换，其实我也不知道。<br>drawPath() 方法可能相对其它较难，但却是自定义 View 实际应用中最多的。非常需要了解其三类方法<br>drawBitmap() 方法中有个参数是 Bitmap，友情提示：Bitmap 可以通过 BitmapFactory.decodeXXX() 获得。  </p>
</blockquote>
<h5 id="Path-可以描述直线、二次曲线、三次曲线、圆、椭圆、弧形、矩形、圆角矩形。把这些图形结合起来，就可以描述出很多复杂的图形。Path-可以归结为两类方法："><a href="#Path-可以描述直线、二次曲线、三次曲线、圆、椭圆、弧形、矩形、圆角矩形。把这些图形结合起来，就可以描述出很多复杂的图形。Path-可以归结为两类方法：" class="headerlink" title="Path 可以描述直线、二次曲线、三次曲线、圆、椭圆、弧形、矩形、圆角矩形。把这些图形结合起来，就可以描述出很多复杂的图形。Path 可以归结为两类方法："></a>Path 可以描述直线、二次曲线、三次曲线、圆、椭圆、弧形、矩形、圆角矩形。把这些图形结合起来，就可以描述出很多复杂的图形。Path 可以归结为两类方法：</h5><blockquote>
<p>直接描述路径，也可以分为两组：<br>添加子图形：addXXX(), 此类方法在特定情况下几个 Canvas.drawPath() 等同于 Canvas.drawXXX()。<br>画直线或曲线：xxxTo(): 这一组和第一组 addXxx() 方法的区别在于，第一组是添加的完整封闭图形（除了 addPath() ），而这一组添加的只是一条线。<br>辅助设置或计算，因为应用场景很少，凯哥也只讲了其中一个方法： Path.setFillType(Path.FillType ft) 设置填充方式  </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要参考&lt;a href=&quot;http://hencoder.com/ui-1-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hencoder自定义view&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;自定义View主要掌握以下四块内容：&lt;/p&gt;
    
    </summary>
    
      <category term="自定义View" scheme="http://leoncommons.cn/categories/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
    
      <category term="Android自定义View" scheme="http://leoncommons.cn/tags/Android%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>Android  Material Design之ripple水波纹使用</title>
    <link href="http://leoncommons.cn/2017/10/12/Android%20%20Material%20Design%E4%B9%8Bripple%E6%B0%B4%E6%B3%A2%E7%BA%B9%E4%BD%BF%E7%94%A8/"/>
    <id>http://leoncommons.cn/2017/10/12/Android  Material Design之ripple水波纹使用/</id>
    <published>2017-10-12T04:25:45.000Z</published>
    <updated>2017-11-27T07:33:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>我们知道在5.0以上的机型，例如button点击的时候会有一种涟漪的水波纹效果，当让我们通常的做法是通过设置andrid:background来给这个控件加一个selector,但是这样做并没有达到我们想要看到的水波纹效果。而在5.0之后Android引入了Ripple水波纹的效果。</p>
</blockquote>
<h2 id="基本使用（5-0以上）"><a href="#基本使用（5-0以上）" class="headerlink" title="基本使用（5.0以上）"></a>基本使用（5.0以上）</h2><h3 id="button的默认效果"><a href="#button的默认效果" class="headerlink" title="button的默认效果"></a>button的默认效果</h3><p><img src="http://oxp7ffm1s.bkt.clouddn.com/ripple-normal.gif" alt="image"></p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Button</div><div class="line">        android:<span class="attribute">layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        android:<span class="attribute">layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        android:<span class="attribute">text</span>=<span class="string">"button3"</span></div><div class="line">        android:<span class="attribute">textColor</span>=<span class="string">"@color/colorPrimaryDark"</span></div><div class="line">        android:<span class="attribute">textSize</span>=<span class="string">"12sp"</span>/&gt;</div></pre></td></tr></table></figure>
<p>其实这就是一段很普通的代码，虽然有水波纹效果，但是有没有感觉很难看。</p>
<h3 id="使用系统的点击Ripple效果"><a href="#使用系统的点击Ripple效果" class="headerlink" title="使用系统的点击Ripple效果"></a>使用系统的点击Ripple效果</h3><blockquote>
<p>这里我们通过设置android:backgroud来设置ripple的点击效果，主要分为2中效果：</p>
<ul>
<li>有边界的水波纹效果<br>这种效果在21以下的机型点击的时候只有普通selector的点击效果</li>
</ul>
</blockquote>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:<span class="built_in">background</span>=<span class="string">"?android:attr/selectableItemBackground"</span></div></pre></td></tr></table></figure>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/ripple-selector-background.gif" alt="image"></p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;Button</div><div class="line">            android:<span class="attribute">layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            android:<span class="attribute">layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            android:<span class="attribute">background</span>=<span class="string">"?android:attr/selectableItemBackground"</span></div><div class="line">            android:<span class="attribute">text</span>=<span class="string">"button1"</span></div><div class="line">            android:<span class="attribute">textColor</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">            android:<span class="attribute">textSize</span>=<span class="string">"12sp"</span>/&gt;</div></pre></td></tr></table></figure>
<ul>
<li>超出边界的水波纹效果  <blockquote>
<p>这种超出边界的必须要21以上才可以</p>
</blockquote>
</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:<span class="built_in">background</span>=<span class="string">"?android:attr/selectableItemBackgroundBorderless"</span></div></pre></td></tr></table></figure>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/ripple-selector-background-border.gif" alt="image"></p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;Button</div><div class="line">           android:<span class="attribute">layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">           android:<span class="attribute">layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">           android:<span class="attribute">background</span>=<span class="string">"?android:attr/selectableItemBackgroundBorderless"</span></div><div class="line">           android:<span class="attribute">text</span>=<span class="string">"button2"</span></div><div class="line">           android:<span class="attribute">textColor</span>=<span class="string">"@color/colorAccent"</span></div><div class="line">           android:<span class="attribute">textSize</span>=<span class="string">"12sp"</span>/&gt;</div></pre></td></tr></table></figure>
<ul>
<li>更改系统水波纹效果颜色<blockquote>
<p>有的时候你觉得这种默认的灰色点击的水波纹效果不是你想要的，但是你又不想去设置ripple标签的drawable,那么你只需要在styles-v21主题里面加入</p>
</blockquote>
</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">item</span> <span class="built_in">name</span> = <span class="string">"android:colorControlHighlight"</span>&gt;@color/colorAccent&lt;/<span class="built_in">item</span>&gt;</div></pre></td></tr></table></figure>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/ripple-selector-background-change.gif" alt="image"></p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;Button</div><div class="line">            android:<span class="attribute">layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            android:<span class="attribute">layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            android:<span class="attribute">background</span>=<span class="string">"?android:attr/selectableItemBackground"</span></div><div class="line">            android:<span class="attribute">text</span>=<span class="string">"button1"</span></div><div class="line">            android:<span class="attribute">textColor</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">            android:<span class="attribute">textSize</span>=<span class="string">"12sp"</span>/&gt;</div></pre></td></tr></table></figure>
<h3 id="使用ripple"><a href="#使用ripple" class="headerlink" title="使用ripple"></a>使用ripple</h3><blockquote>
<p>有的时候你想设置如不同的button点击效果不一样，也就是我想要让它点击的时候显示什么样的颜色的水波纹效果就是啥样的样式，这样一来我们就可以设置ripple标签的drawable</p>
<ul>
<li>超出边界的ripple点击效果  </li>
</ul>
</blockquote>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/ripple-nomask.gif" alt="image"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">ripple</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>        </span></div><div class="line"><span class="attr">android:color</span>=<span class="string">"?android:colorPrimaryDark"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">ripple</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>有边界的ripple点击效果<blockquote>
<p>我们知道，除了超出边界的效果，还有一种是有边界限制的。既然要限制边界，我们就需要给他提供一个范围，即添加一个item标签的mask。</p>
</blockquote>
</li>
</ul>
<ol>
<li>使用颜色作为mask   </li>
</ol>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/ripple-color-mask.gif" alt="image"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ripple</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>        </span></div><div class="line"><span class="attr">android:color</span>=<span class="string">"?android:colorPrimaryDark"</span>&gt;    </div><div class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@color/colorAccent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ripple</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>使用shape作为mask </li>
</ol>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/ripple-shape-mask.gif" alt="image"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ripple</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>        </span></div><div class="line"><span class="attr">android:color</span>=<span class="string">"?android:colorPrimaryDark"</span>&gt;   </div><div class="line">   <span class="tag">&lt;<span class="name">item</span> &gt;</span>        </div><div class="line">      <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"oval"</span>&gt;</span>           </div><div class="line">        <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/colorAccent"</span>&gt;</span><span class="tag">&lt;/<span class="name">solid</span>&gt;</span>        </div><div class="line">     <span class="tag">&lt;/<span class="name">shape</span>&gt;</span>   </div><div class="line">   <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ripple</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>使用图片作为mask  </li>
</ol>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/ripple-image-mask.gif" alt="image"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ripple</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>        </span></div><div class="line"><span class="attr">android:color</span>=<span class="string">"?android:colorPrimaryDark"</span>&gt;    </div><div class="line">     <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/ic_launcher"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ripple</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>给item添加android:id=”@android:id/mask”  </li>
</ol>
<p><img src="http://oxp7ffm1s.bkt.clouddn.com/ripple-imageborder-mask.gif" alt="image"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ripple</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>        </span></div><div class="line"><span class="attr">android:color</span>=<span class="string">"?android:colorPrimaryDark"</span>&gt;    </div><div class="line">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@android:id/mask"</span>        <span class="attr">android:drawable</span>=<span class="string">"@drawable/ic_launcher"</span>&gt;</span>    </div><div class="line">       <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ripple</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>这里出现了一个有趣的现象，我们可以看到从一开始图片是隐藏的，只有点击的时候才出现图片的轮廓，我们可以总结一下：<br>1、如果不指定id，那么在显示的时候会显示出item指定的drawable。2、如果指定id为@android:id/mask，那么默认是不会显示该drawable，而是在点击的时候出现该drawable的轮廓。<br>注意如果使用ripple的话想兼容21以下的版本，必须将ripple设置在drawable-v21目录下，而在drawable目录下则需要存放一个相同命名的xml文件，这样在21以下机型就不会出现crash。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我们知道在5.0以上的机型，例如button点击的时候会有一种涟漪的水波纹效果，当让我们通常的做法是通过设置andrid:background来给这个控件加一个selector,但是这样做并没有达到我们想要看到的水波纹效果。而在5.0之后Andro
    
    </summary>
    
      <category term="Material Design" scheme="http://leoncommons.cn/categories/Material-Design/"/>
    
    
      <category term="ripple水波纹" scheme="http://leoncommons.cn/tags/ripple%E6%B0%B4%E6%B3%A2%E7%BA%B9/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 语法的简单使用</title>
    <link href="http://leoncommons.cn/2017/07/28/Markdown-%E8%AF%AD%E6%B3%95%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://leoncommons.cn/2017/07/28/Markdown-语法的简单使用/</id>
    <published>2017-07-28T10:25:45.000Z</published>
    <updated>2017-11-27T07:32:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown 语法：</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 第一级标题 `&lt;h1&gt;` </div><div class="line">## 第二级标题 `&lt;h2&gt;` </div><div class="line">###### 第六级标题 `&lt;h6&gt;`</div></pre></td></tr></table></figure>
<h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>Markdown 语法：</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*这些文字会生成`&lt;em&gt;`*</div><div class="line">_这些文字会生成`&lt;u&gt;`_</div><div class="line"></div><div class="line">**这些文字会生成`&lt;strong&gt;`**</div><div class="line">__这些文字会生成`&lt;strong&gt;`__</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><em>这些文字会生成<code>&lt;em&gt;</code></em><br><em>这些文字会生成<code>&lt;u&gt;</code></em></p>
<p><strong>这些文字会生成<code>&lt;strong&gt;</code></strong><br><strong>这些文字会生成<code>&lt;strong&gt;</code></strong></p>
<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>四个及以上空格加回车。<br>如果不想打这么多空格，只要回车就为换行，请勾选：<code>Preferences</code> - <code>Themes</code> - <code>Translate newlines to &lt;br&gt; tags</code></p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>Markdown 语法：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>项目一 无序列表 <span class="code">`* + 空格键`</span></div><div class="line"><span class="bullet">* </span>项目二</div><div class="line"><span class="bullet">* </span>项目二的子项目一 无序列表 <span class="code">`TAB + * + 空格键`</span></div><div class="line"><span class="bullet">* </span>项目二的子项目二</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<ul>
<li>项目一 无序列表 <code>* + 空格键</code></li>
<li>项目二</li>
<li>项目二的子项目一 无序列表 <code>TAB + * + 空格键</code></li>
<li>项目二的子项目二</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>Markdown 语法：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1. </span>项目一 有序列表 <span class="code">`数字 + . + 空格键`</span></div><div class="line"><span class="bullet">2. </span>项目二 </div><div class="line"><span class="bullet">3. </span>项目三</div><div class="line"><span class="bullet">1. </span>项目三的子项目一 有序列表 <span class="code">`TAB + 数字 + . + 空格键`</span></div><div class="line"><span class="bullet">2. </span>项目三的子项目二</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<ol>
<li>项目一 有序列表 <code>数字 + . + 空格键</code></li>
<li>项目二 </li>
<li>项目三</li>
<li>项目三的子项目一 有序列表 <code>TAB + 数字 + . + 空格键</code></li>
<li>项目三的子项目二</li>
</ol>
<h3 id="任务列表（Task-lists）"><a href="#任务列表（Task-lists）" class="headerlink" title="任务列表（Task lists）"></a>任务列表（Task lists）</h3><p>Markdown 语法：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> [ ] 任务一 未做任务 <span class="string">`- + 空格 + [ ]`</span></span></div><div class="line">-<span class="ruby"> [x] 任务二 已做任务 <span class="string">`- + 空格 + [x]`</span></span></div></pre></td></tr></table></figure>
<p>效果如下：</p>
<ul>
<li>[ ] 任务一 未做任务 <code>- + 空格 + [ ]</code></li>
<li>[x] 任务二 已做任务 <code>- + 空格 + [x]</code></li>
</ul>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>Markdown 语法：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">![<span class="string">GitHub set up</span>](<span class="link">http://zh.mweb.im/asset/img/set-up-git.gif</span>)</div><div class="line">格式: ![<span class="string">Alt Text</span>](<span class="link">url</span>)</div></pre></td></tr></table></figure>
<p><code>Control + Shift + I</code> 可插入Markdown语法。<br>如果是 MWeb 的文档库中的文档，还可以用拖放图片、<code>CMD + V</code> 粘贴、<code>CMD + Option + I</code> 导入这三种方式来增加图片。<br>效果如下：</p>
<p><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="GitHub set up"></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>Markdown 语法：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">email <span class="xml"><span class="tag">&lt;<span class="name">example@example.com</span>&gt;</span></span></div><div class="line">[<span class="string">GitHub</span>](<span class="link">http://github.com</span>)</div><div class="line">自动生成连接  <span class="xml"><span class="tag">&lt;<span class="name">http:</span>//<span class="attr">www.github.com</span>/&gt;</span></span></div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>Email 连接： <a href="&#x6d;&#97;&#105;&#x6c;&#x74;&#x6f;&#58;&#x65;&#120;&#x61;&#x6d;&#112;&#x6c;&#x65;&#64;&#101;&#120;&#97;&#x6d;&#112;&#x6c;&#101;&#46;&#x63;&#111;&#x6d;">&#x65;&#120;&#x61;&#x6d;&#112;&#x6c;&#x65;&#64;&#101;&#120;&#97;&#x6d;&#112;&#x6c;&#101;&#46;&#x63;&#111;&#x6d;</a><br><a href="http://github.com" target="_blank" rel="external">连接标题Github网站</a><br>自动生成连接像： <a href="http://www.github.com/" target="_blank" rel="external">http://www.github.com/</a> 这样</p>
<h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><p>Markdown 语法：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">某某说:</div><div class="line"><span class="meta">&gt;</span><span class="bash"> 第一行引用</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> 第二行费用文字</span></div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>某某说:</p>
<blockquote>
<p>第一行引用<br>第二行费用文字</p>
</blockquote>
<h2 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h2><p>Markdown 语法：</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">像这样即可：`&lt;addr&gt;` `<span class="keyword">code</span>`</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>像这样即可：<code>&lt;addr&gt;</code> <code>code</code></p>
<h2 id="多行或者一段代码"><a href="#多行或者一段代码" class="headerlink" title="多行或者一段代码"></a>多行或者一段代码</h2><p>Markdown 语法：</p>
<pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(arg) &#123;</div><div class="line">    $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p><code>CMD + Shift + K</code> 可插入Markdown语法。<br>效果如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(arg) &#123;</div><div class="line">    $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="顺序图或流程图"><a href="#顺序图或流程图" class="headerlink" title="顺序图或流程图"></a>顺序图或流程图</h2><p>Markdown 语法：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</div><div class="line">Note right of 李四: 李四愣了一下，说：</div><div class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</div></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: 开始</div><div class="line">e=&gt;end: 结束</div><div class="line">op=&gt;operation: 我的操作</div><div class="line">cond=&gt;condition: 确认？</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure>
</code></pre><p>效果如下（ <code>Preferences</code> - <code>Themes</code> - <code>Enable sequence &amp; flow chart</code> 才会看到效果 ）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</div><div class="line">Note right of 李四: 李四愣了一下，说：</div><div class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: 开始</div><div class="line">e=&gt;end: 结束</div><div class="line">op=&gt;operation: 我的操作</div><div class="line">cond=&gt;condition: 确认？</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>Markdown 语法：</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">第一格表头 <span class="string">| 第二格表头</span></div><div class="line">--------- <span class="string">| -------------</span></div><div class="line">内容单元格 第一列第一格 <span class="string">| 内容单元格第二列第一格</span></div><div class="line">内容单元格 第一列第二格 多加文字 <span class="string">| 内容单元格第二列第二格</span></div></pre></td></tr></table></figure>
<p>效果如下：</p>
<table>
<thead>
<tr>
<th>第一格表头</th>
<th>第二格表头</th>
</tr>
</thead>
<tbody>
<tr>
<td>内容单元格 第一列第一格</td>
<td>内容单元格第二列第一格</td>
</tr>
<tr>
<td>内容单元格 第一列第二格 多加文字</td>
<td>内容单元格第二列第二格</td>
</tr>
</tbody>
</table>
<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>Markdown 语法：</p>
<p>加删除线像这样用： <del>删除这些</del></p>
<p>效果如下：</p>
<p>加删除线像这样用： <del>删除这些</del></p>
<h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>以下三种方式都可以生成分隔线：</p>
<hr>
<hr>
<hr>
<p>效果如下：</p>
<hr>
<hr>
<hr>
<h2 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a>MathJax</h2><p>Markdown 语法：</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">块级公式：</div><div class="line">$$	x = <span class="symbol">\d</span>frac&#123;-b <span class="symbol">\p</span>m <span class="symbol">\s</span>qrt&#123;b^2 - 4ac&#125;&#125;&#123;2a&#125; $$</div><div class="line"></div><div class="line"><span class="symbol">\\</span>[ <span class="symbol">\f</span>rac&#123;1&#125;&#123;<span class="symbol">\B</span>igl(<span class="symbol">\s</span>qrt&#123;<span class="symbol">\p</span>hi <span class="symbol">\s</span>qrt&#123;5&#125;&#125;-<span class="symbol">\p</span>hi<span class="symbol">\B</span>igr) e^&#123;<span class="symbol">\f</span>rac25 <span class="symbol">\p</span>i&#125;&#125; =</div><div class="line">1+<span class="symbol">\f</span>rac&#123;e^&#123;-2<span class="symbol">\p</span>i&#125;&#125; &#123;1+<span class="symbol">\f</span>rac&#123;e^&#123;-4<span class="symbol">\p</span>i&#125;&#125; &#123;1+<span class="symbol">\f</span>rac&#123;e^&#123;-6<span class="symbol">\p</span>i&#125;&#125;</div><div class="line">&#123;1+<span class="symbol">\f</span>rac&#123;e^&#123;-8<span class="symbol">\p</span>i&#125;&#125; &#123;1+<span class="symbol">\l</span>dots&#125; &#125; &#125; &#125; <span class="symbol">\\</span>]</div><div class="line"></div><div class="line">行内公式： $<span class="symbol">\G</span>amma(n) = (n-1)!<span class="symbol">\q</span>uad<span class="symbol">\f</span>orall n<span class="symbol">\i</span>n<span class="symbol">\m</span>athbb N$</div></pre></td></tr></table></figure>
<p>效果如下（<code>Preferences</code> - <code>Themes</code> - <code>Enable MathJax</code> 才会看到效果）：</p>
<p>块级公式：<br>$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p>
<p>\[ \frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} =<br>1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}}<br>{1+\frac{e^{-8\pi}} {1+\ldots} } } } \]</p>
<p>行内公式： $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</p>
<h2 id="脚注（Footnote）"><a href="#脚注（Footnote）" class="headerlink" title="脚注（Footnote）"></a>脚注（Footnote）</h2><p>Markdown 语法：</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是一个脚注：<span class="string">[^sample_footnote]</span></div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>这是一个脚注：<a href="这里是脚注信息">^sample_footnote</a></p>
<h2 id="注释和阅读更多"><a href="#注释和阅读更多" class="headerlink" title="注释和阅读更多"></a>注释和阅读更多</h2><!-- comment -->
<a id="more"></a>
<p>Actions-&gt;Insert Read More Comment <em>或者</em> <code>Command + .</code><br><strong>注</strong> 阅读更多的功能只用在生成网站或博客时，插入时注意要后空一行。</p>
<h2 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h2><p>Markdown 语法：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[TOC]</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>[TOC]</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h2&gt;&lt;p&gt;Markdown 语法：&lt;/p&gt;
&lt;figure class=&quot;highlight clean&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# 第一级标题 `&amp;lt;h1&amp;gt;` &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;## 第二级标题 `&amp;lt;h2&amp;gt;` &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;###### 第六级标题 `&amp;lt;h6&amp;gt;`&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;强调&quot;&gt;&lt;a href=&quot;#强调&quot; class=&quot;headerlink&quot; title=&quot;强调&quot;&gt;&lt;/a&gt;强调&lt;/h2&gt;&lt;p&gt;Markdown 语法：&lt;/p&gt;
&lt;figure class=&quot;highlight autohotkey&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;*这些文字会生成`&amp;lt;em&amp;gt;`*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;_这些文字会生成`&amp;lt;u&amp;gt;`_&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;**这些文字会生成`&amp;lt;strong&amp;gt;`**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;__这些文字会生成`&amp;lt;strong&amp;gt;`__&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;这些文字会生成&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;br&gt;&lt;em&gt;这些文字会生成&lt;code&gt;&amp;lt;u&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这些文字会生成&lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;这些文字会生成&lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;换行&quot;&gt;&lt;a href=&quot;#换行&quot; class=&quot;headerlink&quot; title=&quot;换行&quot;&gt;&lt;/a&gt;换行&lt;/h2&gt;&lt;p&gt;四个及以上空格加回车。&lt;br&gt;如果不想打这么多空格，只要回车就为换行，请勾选：&lt;code&gt;Preferences&lt;/code&gt; - &lt;code&gt;Themes&lt;/code&gt; - &lt;code&gt;Translate newlines to &amp;lt;br&amp;gt; tags&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h2&gt;&lt;h3 id=&quot;无序列表&quot;&gt;&lt;a href=&quot;#无序列表&quot; class=&quot;headerlink&quot; title=&quot;无序列表&quot;&gt;&lt;/a&gt;无序列表&lt;/h3&gt;&lt;p&gt;Markdown 语法：&lt;/p&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;* &lt;/span&gt;项目一 无序列表 &lt;span class=&quot;code&quot;&gt;`* + 空格键`&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;* &lt;/span&gt;项目二&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;* &lt;/span&gt;项目二的子项目一 无序列表 &lt;span class=&quot;code&quot;&gt;`TAB + * + 空格键`&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;* &lt;/span&gt;项目二的子项目二&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目一 无序列表 &lt;code&gt;* + 空格键&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;项目二&lt;/li&gt;
&lt;li&gt;项目二的子项目一 无序列表 &lt;code&gt;TAB + * + 空格键&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;项目二的子项目二&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;有序列表&quot;&gt;&lt;a href=&quot;#有序列表&quot; class=&quot;headerlink&quot; title=&quot;有序列表&quot;&gt;&lt;/a&gt;有序列表&lt;/h3&gt;&lt;p&gt;Markdown 语法：&lt;/p&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;1. &lt;/span&gt;项目一 有序列表 &lt;span class=&quot;code&quot;&gt;`数字 + . + 空格键`&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;2. &lt;/span&gt;项目二 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;3. &lt;/span&gt;项目三&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;1. &lt;/span&gt;项目三的子项目一 有序列表 &lt;span class=&quot;code&quot;&gt;`TAB + 数字 + . + 空格键`&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;2. &lt;/span&gt;项目三的子项目二&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;项目一 有序列表 &lt;code&gt;数字 + . + 空格键&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;项目二 &lt;/li&gt;
&lt;li&gt;项目三&lt;/li&gt;
&lt;li&gt;项目三的子项目一 有序列表 &lt;code&gt;TAB + 数字 + . + 空格键&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;项目三的子项目二&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;任务列表（Task-lists）&quot;&gt;&lt;a href=&quot;#任务列表（Task-lists）&quot; class=&quot;headerlink&quot; title=&quot;任务列表（Task lists）&quot;&gt;&lt;/a&gt;任务列表（Task lists）&lt;/h3&gt;&lt;p&gt;Markdown 语法：&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt; [ ] 任务一 未做任务 &lt;span class=&quot;string&quot;&gt;`- + 空格 + [ ]`&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt; [x] 任务二 已做任务 &lt;span class=&quot;string&quot;&gt;`- + 空格 + [x]`&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] 任务一 未做任务 &lt;code&gt;- + 空格 + [ ]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[x] 任务二 已做任务 &lt;code&gt;- + 空格 + [x]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;图片&quot;&gt;&lt;a href=&quot;#图片&quot; class=&quot;headerlink&quot; title=&quot;图片&quot;&gt;&lt;/a&gt;图片&lt;/h2&gt;&lt;p&gt;Markdown 语法：&lt;/p&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;![&lt;span class=&quot;string&quot;&gt;GitHub set up&lt;/span&gt;](&lt;span class=&quot;link&quot;&gt;http://zh.mweb.im/asset/img/set-up-git.gif&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;格式: ![&lt;span class=&quot;string&quot;&gt;Alt Text&lt;/span&gt;](&lt;span class=&quot;link&quot;&gt;url&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Control + Shift + I&lt;/code&gt; 可插入Markdown语法。&lt;br&gt;如果是 MWeb 的文档库中的文档，还可以用拖放图片、&lt;code&gt;CMD + V&lt;/code&gt; 粘贴、&lt;code&gt;CMD + Option + I&lt;/code&gt; 导入这三种方式来增加图片。&lt;br&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://zh.mweb.im/asset/img/set-up-git.gif&quot; alt=&quot;GitHub set up&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;p&gt;Markdown 语法：&lt;/p&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;email &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;example@example.com&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;GitHub&lt;/span&gt;](&lt;span class=&quot;link&quot;&gt;http://github.com&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;自动生成连接  &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;http:&lt;/span&gt;//&lt;span class=&quot;attr&quot;&gt;www.github.com&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;Email 连接： &lt;a href=&quot;&amp;#x6d;&amp;#97;&amp;#105;&amp;#x6c;&amp;#x74;&amp;#x6f;&amp;#58;&amp;#x65;&amp;#120;&amp;#x61;&amp;#x6d;&amp;#112;&amp;#x6c;&amp;#x65;&amp;#64;&amp;#101;&amp;#120;&amp;#97;&amp;#x6d;&amp;#112;&amp;#x6c;&amp;#101;&amp;#46;&amp;#x63;&amp;#111;&amp;#x6d;&quot;&gt;&amp;#x65;&amp;#120;&amp;#x61;&amp;#x6d;&amp;#112;&amp;#x6c;&amp;#x65;&amp;#64;&amp;#101;&amp;#120;&amp;#97;&amp;#x6d;&amp;#112;&amp;#x6c;&amp;#101;&amp;#46;&amp;#x63;&amp;#111;&amp;#x6d;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;连接标题Github网站&lt;/a&gt;&lt;br&gt;自动生成连接像： &lt;a href=&quot;http://www.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.github.com/&lt;/a&gt; 这样&lt;/p&gt;
&lt;h2 id=&quot;区块引用&quot;&gt;&lt;a href=&quot;#区块引用&quot; class=&quot;headerlink&quot; title=&quot;区块引用&quot;&gt;&lt;/a&gt;区块引用&lt;/h2&gt;&lt;p&gt;Markdown 语法：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;某某说:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 第一行引用&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 第二行费用文字&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;某某说:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第一行引用&lt;br&gt;第二行费用文字&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;行内代码&quot;&gt;&lt;a href=&quot;#行内代码&quot; class=&quot;headerlink&quot; title=&quot;行内代码&quot;&gt;&lt;/a&gt;行内代码&lt;/h2&gt;&lt;p&gt;Markdown 语法：&lt;/p&gt;
&lt;figure class=&quot;highlight clean&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;像这样即可：`&amp;lt;addr&amp;gt;` `&lt;span class=&quot;keyword&quot;&gt;code&lt;/span&gt;`&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;像这样即可：&lt;code&gt;&amp;lt;addr&amp;gt;&lt;/code&gt; &lt;code&gt;code&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;多行或者一段代码&quot;&gt;&lt;a href=&quot;#多行或者一段代码&quot; class=&quot;headerlink&quot; title=&quot;多行或者一段代码&quot;&gt;&lt;/a&gt;多行或者一段代码&lt;/h2&gt;&lt;p&gt;Markdown 语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fancyAlert&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arg&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(arg) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $.facebox(&amp;#123;&lt;span class=&quot;attr&quot;&gt;div&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;#foo&#39;&lt;/span&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;CMD + Shift + K&lt;/code&gt; 可插入Markdown语法。&lt;br&gt;效果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fancyAlert&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arg&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(arg) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $.facebox(&amp;#123;&lt;span class=&quot;attr&quot;&gt;div&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;#foo&#39;&lt;/span&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;顺序图或流程图&quot;&gt;&lt;a href=&quot;#顺序图或流程图&quot; class=&quot;headerlink&quot; title=&quot;顺序图或流程图&quot;&gt;&lt;/a&gt;顺序图或流程图&lt;/h2&gt;&lt;p&gt;Markdown 语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;张三-&amp;gt;李四: 嘿，小四儿, 写博客了没?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Note right of 李四: 李四愣了一下，说：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;李四--&amp;gt;张三: 忙得吐血，哪有时间写。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;st=&amp;gt;start: 开始&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;e=&amp;gt;end: 结束&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;op=&amp;gt;operation: 我的操作&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cond=&amp;gt;condition: 确认？&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;st-&amp;gt;op-&amp;gt;cond&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cond(yes)-&amp;gt;e&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cond(no)-&amp;gt;op&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果如下（ &lt;code&gt;Preferences&lt;/code&gt; - &lt;code&gt;Themes&lt;/code&gt; - &lt;code&gt;Enable sequence &amp;amp; flow chart&lt;/code&gt; 才会看到效果 ）：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;张三-&amp;gt;李四: 嘿，小四儿, 写博客了没?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Note right of 李四: 李四愣了一下，说：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;李四--&amp;gt;张三: 忙得吐血，哪有时间写。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;st=&amp;gt;start: 开始&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;e=&amp;gt;end: 结束&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;op=&amp;gt;operation: 我的操作&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cond=&amp;gt;condition: 确认？&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;st-&amp;gt;op-&amp;gt;cond&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cond(yes)-&amp;gt;e&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cond(no)-&amp;gt;op&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;表格&quot;&gt;&lt;a href=&quot;#表格&quot; class=&quot;headerlink&quot; title=&quot;表格&quot;&gt;&lt;/a&gt;表格&lt;/h2&gt;&lt;p&gt;Markdown 语法：&lt;/p&gt;
&lt;figure class=&quot;highlight 1c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;第一格表头 &lt;span class=&quot;string&quot;&gt;| 第二格表头&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--------- &lt;span class=&quot;string&quot;&gt;| -------------&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;内容单元格 第一列第一格 &lt;span class=&quot;string&quot;&gt;| 内容单元格第二列第一格&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;内容单元格 第一列第二格 多加文字 &lt;span class=&quot;string&quot;&gt;| 内容单元格第二列第二格&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;第一格表头&lt;/th&gt;
&lt;th&gt;第二格表头&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;内容单元格 第一列第一格&lt;/td&gt;
&lt;td&gt;内容单元格第二列第一格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;内容单元格 第一列第二格 多加文字&lt;/td&gt;
&lt;td&gt;内容单元格第二列第二格&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;删除线&quot;&gt;&lt;a href=&quot;#删除线&quot; class=&quot;headerlink&quot; title=&quot;删除线&quot;&gt;&lt;/a&gt;删除线&lt;/h2&gt;&lt;p&gt;Markdown 语法：&lt;/p&gt;
&lt;p&gt;加删除线像这样用： &lt;del&gt;删除这些&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;加删除线像这样用： &lt;del&gt;删除这些&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;分隔线&quot;&gt;&lt;a href=&quot;#分隔线&quot; class=&quot;headerlink&quot; title=&quot;分隔线&quot;&gt;&lt;/a&gt;分隔线&lt;/h2&gt;&lt;p&gt;以下三种方式都可以生成分隔线：&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h2 id=&quot;MathJax&quot;&gt;&lt;a href=&quot;#MathJax&quot; class=&quot;headerlink&quot; title=&quot;MathJax&quot;&gt;&lt;/a&gt;MathJax&lt;/h2&gt;&lt;p&gt;Markdown 语法：&lt;/p&gt;
&lt;figure class=&quot;highlight taggerscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;块级公式：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$$	x = &lt;span class=&quot;symbol&quot;&gt;\d&lt;/span&gt;frac&amp;#123;-b &lt;span class=&quot;symbol&quot;&gt;\p&lt;/span&gt;m &lt;span class=&quot;symbol&quot;&gt;\s&lt;/span&gt;qrt&amp;#123;b^2 - 4ac&amp;#125;&amp;#125;&amp;#123;2a&amp;#125; $$&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;\\&lt;/span&gt;[ &lt;span class=&quot;symbol&quot;&gt;\f&lt;/span&gt;rac&amp;#123;1&amp;#125;&amp;#123;&lt;span class=&quot;symbol&quot;&gt;\B&lt;/span&gt;igl(&lt;span class=&quot;symbol&quot;&gt;\s&lt;/span&gt;qrt&amp;#123;&lt;span class=&quot;symbol&quot;&gt;\p&lt;/span&gt;hi &lt;span class=&quot;symbol&quot;&gt;\s&lt;/span&gt;qrt&amp;#123;5&amp;#125;&amp;#125;-&lt;span class=&quot;symbol&quot;&gt;\p&lt;/span&gt;hi&lt;span class=&quot;symbol&quot;&gt;\B&lt;/span&gt;igr) e^&amp;#123;&lt;span class=&quot;symbol&quot;&gt;\f&lt;/span&gt;rac25 &lt;span class=&quot;symbol&quot;&gt;\p&lt;/span&gt;i&amp;#125;&amp;#125; =&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1+&lt;span class=&quot;symbol&quot;&gt;\f&lt;/span&gt;rac&amp;#123;e^&amp;#123;-2&lt;span class=&quot;symbol&quot;&gt;\p&lt;/span&gt;i&amp;#125;&amp;#125; &amp;#123;1+&lt;span class=&quot;symbol&quot;&gt;\f&lt;/span&gt;rac&amp;#123;e^&amp;#123;-4&lt;span class=&quot;symbol&quot;&gt;\p&lt;/span&gt;i&amp;#125;&amp;#125; &amp;#123;1+&lt;span class=&quot;symbol&quot;&gt;\f&lt;/span&gt;rac&amp;#123;e^&amp;#123;-6&lt;span class=&quot;symbol&quot;&gt;\p&lt;/span&gt;i&amp;#125;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;1+&lt;span class=&quot;symbol&quot;&gt;\f&lt;/span&gt;rac&amp;#123;e^&amp;#123;-8&lt;span class=&quot;symbol&quot;&gt;\p&lt;/span&gt;i&amp;#125;&amp;#125; &amp;#123;1+&lt;span class=&quot;symbol&quot;&gt;\l&lt;/span&gt;dots&amp;#125; &amp;#125; &amp;#125; &amp;#125; &lt;span class=&quot;symbol&quot;&gt;\\&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;行内公式： $&lt;span class=&quot;symbol&quot;&gt;\G&lt;/span&gt;amma(n) = (n-1)!&lt;span class=&quot;symbol&quot;&gt;\q&lt;/span&gt;uad&lt;span class=&quot;symbol&quot;&gt;\f&lt;/span&gt;orall n&lt;span class=&quot;symbol&quot;&gt;\i&lt;/span&gt;n&lt;span class=&quot;symbol&quot;&gt;\m&lt;/span&gt;athbb N$&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果如下（&lt;code&gt;Preferences&lt;/code&gt; - &lt;code&gt;Themes&lt;/code&gt; - &lt;code&gt;Enable MathJax&lt;/code&gt; 才会看到效果）：&lt;/p&gt;
&lt;p&gt;块级公式：&lt;br&gt;$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$&lt;/p&gt;
&lt;p&gt;\[ \frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} =&lt;br&gt;1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}}&lt;br&gt;{1+\frac{e^{-8\pi}} {1+\ldots} } } } \]&lt;/p&gt;
&lt;p&gt;行内公式： $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$&lt;/p&gt;
&lt;h2 id=&quot;脚注（Footnote）&quot;&gt;&lt;a href=&quot;#脚注（Footnote）&quot; class=&quot;headerlink&quot; title=&quot;脚注（Footnote）&quot;&gt;&lt;/a&gt;脚注（Footnote）&lt;/h2&gt;&lt;p&gt;Markdown 语法：&lt;/p&gt;
&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是一个脚注：&lt;span class=&quot;string&quot;&gt;[^sample_footnote]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;这是一个脚注：&lt;a href=&quot;这里是脚注信息&quot;&gt;^sample_footnote&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;注释和阅读更多&quot;&gt;&lt;a href=&quot;#注释和阅读更多&quot; class=&quot;headerlink&quot; title=&quot;注释和阅读更多&quot;&gt;&lt;/a&gt;注释和阅读更多&lt;/h2&gt;&lt;!-- comment --&gt;
    
    </summary>
    
      <category term="Markdown" scheme="http://leoncommons.cn/categories/Markdown/"/>
    
    
      <category term="Markdown使用" scheme="http://leoncommons.cn/tags/Markdown%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://leoncommons.cn/2017/07/04/hello-world/"/>
    <id>http://leoncommons.cn/2017/07/04/hello-world/</id>
    <published>2017-07-04T10:06:39.000Z</published>
    <updated>2017-07-26T13:21:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
